{
  "version": 3,
  "sources": ["../src/index.ts", "../src/data/cultures.ts", "../src/data/EUCountries.ts", "../src/utils/createMapFromRecord.ts", "../src/CultureInfo.ts", "../src/data/SalesAccounts.ts", "../src/data/VATAccounts.ts", "../src/types/WcOrder.ts", "../src/LineItems.ts", "../src/utils/formatDate.ts", "../src/utils/removeEmojis.ts", "../src/utils/sanitizeTextForFortnox.ts", "../src/utils/toNumber.ts", "../src/WcOrders.ts", "../src/Accounts.ts", "../src/Articles.ts", "../src/Customers.ts", "../src/Invoices.ts", "../src/StripePayouts.ts", "../src/SupplierInvoices.ts", "../src/Verification.ts", "../src/Vouchers.ts"],
  "sourcesContent": ["export * from \"./Accounts\";\nexport { default as Accounts } from \"./Accounts\";\nexport * from \"./Articles\";\nexport { default as Articles } from \"./Articles\";\nexport * from \"./CultureInfo\";\nexport { default as CultureInfo } from \"./CultureInfo\";\nexport * from \"./Customers\";\nexport { default as Customers } from \"./Customers\";\nexport * from \"./Invoices\";\nexport { default as Invoices } from \"./Invoices\";\nexport * from \"./LineItems\";\nexport { default as LineItems } from \"./LineItems\";\nexport { default as StripePayouts } from \"./StripePayouts\";\nexport { default as SupplierInvoices } from \"./SupplierInvoices\";\nexport * from \"./types\";\nexport * from \"./utils\";\nexport * from \"./Verification\";\nexport { default as Verification } from \"./Verification\";\nexport * from \"./Vouchers\";\nexport { default as Vouchers } from \"./Vouchers\";\nexport * from \"./WcOrders\";\nexport { default as WcOrders } from \"./WcOrders\";\n", "const cultures = {\n  AF: \"Afghanistan\",\n  AL: \"Albania\",\n  DZ: \"Algeria\",\n  AR: \"Argentina\",\n  AM: \"Armenia\",\n  AU: \"Australia\",\n  AT: \"Austria\",\n  BH: \"Bahrain\",\n  BD: \"Bangladesh\",\n  BY: \"Belarus\",\n\n  BE: \"Belgium\",\n\n  BZ: \"Belize\",\n\n  VE: \"Venezuela\",\n\n  BO: \"Bolivia\",\n\n  BR: \"Brazil\",\n\n  BN: \"Brunei Darussalam\",\n\n  BG: \"Bulgaria\",\n\n  KH: \"Cambodia\",\n\n  CA: \"Canada\",\n\n  \"29\": \"Caribbean\",\n  CL: \"Chile\",\n\n  CO: \"Colombia\",\n\n  CR: \"Costa Rica\",\n\n  HR: \"Croatia\",\n\n  AZ: \"Azerbaijan\",\n\n  BA: \"Bosnia and Herzegovina\",\n\n  MN: \"Mongolia\",\n\n  ME: \"Montenegro\",\n\n  RS: \"Serbia\",\n\n  TJ: \"Tajikistan\",\n\n  CZ: \"Czech Republic\",\n\n  DK: \"Denmark\",\n\n  DM: \"Dominica\",\n  DO: \"Dominican Republic\",\n\n  EC: \"Ecuador\",\n\n  EG: \"Egypt\",\n\n  SV: \"El Salvador\",\n\n  EE: \"Estonia\",\n\n  ET: \"Ethiopia\",\n\n  FO: \"Faroe Islands\",\n\n  FI: \"Finland\",\n\n  MK: \"North Macedonia\",\n\n  FR: \"France\",\n\n  GE: \"Georgia\",\n\n  DE: \"Germany\",\n\n  GP: \"Guadeloupe\",\n\n  GR: \"Greece\",\n\n  GL: \"Greenland\",\n\n  GT: \"Guatemala\",\n\n  HK: \"Hong Kong\",\n  HN: \"Honduras\",\n\n  HU: \"Hungary\",\n\n  IS: \"Iceland\",\n\n  IN: \"India\",\n\n  ID: \"Indonesia\",\n\n  IR: \"Iran\",\n\n  IE: \"Ireland\",\n\n  IM: \"Isle of Man\",\n\n  PK: \"Pakistan\",\n\n  IL: \"Israel\",\n\n  IT: \"Italy\",\n\n  JE: \"Jersey\",\n\n  JM: \"Jamaica\",\n\n  JP: \"Japan\",\n\n  JO: \"Jordan\",\n\n  KZ: \"Kazakhstan\",\n\n  KE: \"Kenya\",\n\n  KR: \"Sydkorea\", // Note: Fortnox localization, swedish for South Korea\n\n  KW: \"Kuwait\",\n\n  KG: \"Kyrgyzstan\",\n\n  LA: \"Lao People's Democratic Republic\",\n\n  LV: \"Latvia\",\n\n  LB: \"Lebanon\",\n\n  LY: \"Libya\",\n\n  LI: \"Liechtenstein\",\n\n  LT: \"Lithuania\",\n\n  LU: \"Luxembourg\",\n\n  MY: \"Malaysia\",\n\n  MV: \"Maldives\",\n\n  MT: \"Malta\",\n\n  MX: \"Mexico\",\n\n  MC: \"Monaco\",\n\n  MA: \"Morocco\",\n\n  NP: \"Nepal\",\n\n  NL: \"Netherlands\",\n\n  NZ: \"New Zealand\",\n\n  NG: \"Nigeria\",\n\n  NO: \"Norway\",\n\n  OM: \"Oman\",\n\n  PA: \"Panama\",\n\n  PY: \"Paraguay\",\n\n  PE: \"Peru\",\n\n  PH: \"Philippines\",\n\n  PL: \"Poland\",\n\n  PT: \"Portugal\",\n\n  CN: \"China\",\n\n  CY: \"Cyprus\",\n\n  PR: \"Puerto Rico\",\n\n  QA: \"Qatar\",\n\n  RO: \"Romania\",\n\n  RU: \"Russia\",\n\n  RW: \"Rwanda\",\n\n  SA: \"Saudi Arabia\",\n\n  SN: \"Senegal\",\n\n  SG: \"Singapore\",\n\n  SK: \"Slovakia\",\n\n  SI: \"Slovenia\",\n\n  ZA: \"South Africa\",\n\n  ES: \"Spain\",\n\n  LK: \"Sri Lanka\",\n\n  SE: \"Sverige\",\n\n  CH: \"Switzerland\",\n\n  SY: \"Syria\",\n\n  TH: \"Thailand\",\n\n  TT: \"Trinidad and Tobago\",\n\n  TN: \"Tunisia\",\n\n  TR: \"Turkey\", // T\u00FCrkiye\n\n  TM: \"Turkmenistan\",\n\n  AE: \"United Arab Emirates\",\n\n  UA: \"Ukraine\",\n\n  GB: \"United Kingdom\",\n\n  US: \"United States\",\n\n  UY: \"Uruguay\",\n\n  VN: \"Vietnam\",\n\n  YE: \"Yemen\",\n\n  ZW: \"Zimbabwe\",\n};\n\nexport default cultures;\n", "export default [\n  \"ES\",\n  \"BG\",\n  \"HU\",\n  \"LV\",\n  \"PL\",\n  \"CZ\",\n  \"MT\",\n  \"IT\",\n  \"SI\",\n  \"IE\",\n  \"SE\",\n  \"DK\",\n  \"FI\",\n  \"CY\",\n  \"LU\",\n  \"RO\",\n  \"EE\",\n  \"GR\",\n  \"LT\",\n  \"FR\",\n  \"HR\",\n  \"BE\",\n  \"NL\",\n  \"SK\",\n  \"DE\",\n  \"PT\",\n  \"AT\",\n];\n", "type Entries<T> = Array<\n  {\n    [K in keyof T]: [K, T[K]];\n  }[keyof T]\n>;\n\nconst entries = <Object_ extends Record<string | number | symbol, unknown>>(\n  object: Object_\n): Entries<Object_> => Object.entries(object) as Entries<Object_>;\n\nconst createMapFromRecord = <TKey extends string = string, TValue = unknown>(\n  data: Record<TKey, TValue>\n): Map<TKey, TValue> =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  entries(data).reduce(\n    (\n      accumulator: Map<TKey, TValue>,\n      [key, value]: [key: TKey, value: TValue]\n    ) => {\n      accumulator.set(key, value);\n      return accumulator;\n    },\n    new Map<TKey, TValue>()\n  );\n\nexport default createMapFromRecord;\n", "import cultures from \"./data/cultures\";\nimport EUCountries from \"./data/EUCountries\";\nimport createMapFromRecord from \"./utils/createMapFromRecord\";\n\nabstract class CultureInfo {\n  private static readonly cultures = createMapFromRecord<string, string>(\n    cultures\n  );\n\n  public static tryGetEnglishName(countryIso: string): string {\n    const countryName = this.cultures.get(countryIso);\n\n    if (!countryName) {\n      throw new Error(`Missing English name for country code: ${countryIso}`);\n    }\n\n    return countryName;\n  }\n\n  public static isInsideEU(countryIso: string): boolean {\n    return EUCountries.includes(countryIso.toUpperCase());\n  }\n\n  public static tryGetCountryIso(countryNameOrIso: string): string {\n    if (this.cultures.has(countryNameOrIso)) return countryNameOrIso;\n\n    let result;\n    Object.entries(cultures).forEach(([iso, countryName]): void => {\n      if (countryNameOrIso === countryName) result = iso;\n    });\n\n    if (!result)\n      throw new Error(`Could not deduce Country Iso from ${countryNameOrIso}`);\n    return result;\n  }\n}\n\nexport default CultureInfo;\n", "const SalesAccounts = {\n  AT: {\n    country: \"AT\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 3109,\n    },\n    reduced: {\n      vat: 0.1,\n      accountNumber: 3110,\n    },\n  },\n  BE: {\n    country: \"BE\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 3111,\n    },\n    reduced: {\n      vat: 0.06,\n      accountNumber: 3112,\n    },\n  },\n  BG: {\n    country: \"BG\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 3113,\n    },\n    reduced: {\n      vat: 0.2,\n      accountNumber: 3113,\n    },\n  },\n  CY: {\n    country: \"CY\",\n    standard: {\n      vat: 0.19,\n      accountNumber: 3115,\n    },\n    reduced: {\n      vat: 0.05,\n      accountNumber: 3116,\n    },\n  },\n  CZ: {\n    country: \"CZ\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 3117,\n    },\n    reduced: {\n      vat: 0.15,\n      accountNumber: 3118,\n    },\n  },\n  DE: {\n    country: \"DE\",\n    standard: {\n      vat: 0.19,\n      accountNumber: 3119,\n    },\n    reduced: {\n      vat: 0.07,\n      accountNumber: 3120,\n    },\n  },\n  DK: {\n    country: \"DK\",\n    standard: {\n      vat: 0.25,\n      accountNumber: 3121,\n    },\n    reduced: {\n      vat: 0.25,\n      accountNumber: 3121,\n    },\n  },\n  EE: {\n    country: \"EE\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 3123,\n    },\n    reduced: {\n      vat: 0.09,\n      accountNumber: 3124,\n    },\n  },\n  ES: {\n    country: \"ES\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 3125,\n    },\n    reduced: {\n      vat: 0.1,\n      accountNumber: 3126,\n    },\n  },\n  FI: {\n    country: \"FI\",\n    standard: {\n      vat: 0.24,\n      accountNumber: 3127,\n    },\n    reduced: {\n      vat: 0.14,\n      accountNumber: 3128,\n    },\n  },\n  FR: {\n    country: \"FR\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 3129,\n    },\n    reduced: {\n      vat: 0.055,\n      accountNumber: 3130,\n    },\n  },\n  GR: {\n    country: \"GR\",\n    standard: {\n      vat: 0.24,\n      accountNumber: 3131,\n    },\n    reduced: {\n      vat: 0.13,\n      accountNumber: 3132,\n    },\n  },\n  HR: {\n    country: \"HR\",\n    standard: {\n      vat: 0.25,\n      accountNumber: 3133,\n    },\n    reduced: {\n      vat: 0.13,\n      accountNumber: 3134,\n    },\n  },\n  HU: {\n    country: \"HU\",\n    standard: {\n      vat: 0.27,\n      accountNumber: 3135,\n    },\n    reduced: {\n      vat: 0.27,\n      accountNumber: 3135,\n    },\n  },\n  IE: {\n    country: \"IE\",\n    standard: {\n      vat: 0.23,\n      accountNumber: 3137,\n    },\n    reduced: {\n      vat: 0.23,\n      accountNumber: 3137,\n    },\n  },\n  IT: {\n    country: \"IT\",\n    standard: {\n      vat: 0.22,\n      accountNumber: 3139,\n    },\n    reduced: {\n      vat: 0.1,\n      accountNumber: 3140,\n    },\n  },\n  LT: {\n    country: \"LT\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 3141,\n    },\n    reduced: {\n      vat: 0.21,\n      accountNumber: 3141,\n    },\n  },\n  LU: {\n    country: \"LU\",\n    standard: {\n      vat: 0.17,\n      accountNumber: 3143,\n    },\n    reduced: {\n      vat: 0.03,\n      accountNumber: 3144,\n    },\n  },\n  LV: {\n    country: \"LV\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 3145,\n    },\n    reduced: {\n      vat: 0.21,\n      accountNumber: 3145,\n    },\n  },\n  MT: {\n    country: \"MT\",\n    standard: {\n      vat: 0.18,\n      accountNumber: 3147,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 3148,\n    },\n  },\n  NL: {\n    country: \"NL\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 3149,\n    },\n    reduced: {\n      vat: 0.09,\n      accountNumber: 3150,\n    },\n  },\n  PL: {\n    country: \"PL\",\n    standard: {\n      vat: 0.23,\n      accountNumber: 3151,\n    },\n    reduced: {\n      vat: 0.23,\n      accountNumber: 3151,\n    },\n  },\n  PT: {\n    country: \"PT\",\n    standard: {\n      vat: 0.23,\n      accountNumber: 3153,\n    },\n    reduced: {\n      vat: 0.23,\n      accountNumber: 3153,\n    },\n  },\n  RO: {\n    country: \"RO\",\n    standard: {\n      vat: 0.19,\n      accountNumber: 3155,\n    },\n    reduced: {\n      vat: 0.09,\n      accountNumber: 3156,\n    },\n  },\n  SI: {\n    country: \"SI\",\n    standard: {\n      vat: 0.22,\n      accountNumber: 3157,\n    },\n    reduced: {\n      vat: 0.095,\n      accountNumber: 3158,\n    },\n  },\n  SK: {\n    country: \"SK\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 3159,\n    },\n    reduced: {\n      vat: 0.2,\n      accountNumber: 3159,\n    },\n  },\n  SE: {\n    country: \"SE\",\n    standard: {\n      vat: 0.25,\n      accountNumber: 3001,\n    },\n    reduced: {\n      vat: 0.12,\n      accountNumber: 3002,\n    },\n  },\n  PayPal: {\n    standard: {\n      vat: 0,\n      accountNumber: 1940,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 1940,\n    },\n  },\n  Stripe: {\n    standard: {\n      vat: 0,\n      accountNumber: 1580,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 1580,\n    },\n  },\n  NON_EU: {\n    standard: {\n      vat: 0,\n      accountNumber: 3105,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 3105,\n    },\n  },\n};\nexport default SalesAccounts;\n", "const VatAccounts = {\n  AT: {\n    country: \"AT\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 9109,\n    },\n    reduced: {\n      vat: 0.1,\n      accountNumber: 9110,\n    },\n  },\n  BE: {\n    country: \"BE\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 9111,\n    },\n    reduced: {\n      vat: 0.06,\n      accountNumber: 9112,\n    },\n  },\n  BG: {\n    country: \"BG\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 9113,\n    },\n    reduced: {\n      vat: 0.2,\n      accountNumber: 9113,\n    },\n  },\n  CY: {\n    country: \"CY\",\n    standard: {\n      vat: 0.19,\n      accountNumber: 9115,\n    },\n    reduced: {\n      vat: 0.05,\n      accountNumber: 9116,\n    },\n  },\n  CZ: {\n    country: \"CZ\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 9117,\n    },\n    reduced: {\n      vat: 0.15,\n      accountNumber: 9118,\n    },\n  },\n  DE: {\n    country: \"DE\",\n    standard: {\n      vat: 0.19,\n      accountNumber: 9119,\n    },\n    reduced: {\n      vat: 0.07,\n      accountNumber: 9120,\n    },\n  },\n  DK: {\n    country: \"DK\",\n    standard: {\n      vat: 0.25,\n      accountNumber: 9121,\n    },\n    reduced: {\n      vat: 0.25,\n      accountNumber: 9121,\n    },\n  },\n  EE: {\n    country: \"EE\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 9123,\n    },\n    reduced: {\n      vat: 0.09,\n      accountNumber: 9124,\n    },\n  },\n  ES: {\n    country: \"ES\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 9125,\n    },\n    reduced: {\n      vat: 0.1,\n      accountNumber: 9126,\n    },\n  },\n  FI: {\n    country: \"FI\",\n    standard: {\n      vat: 0.24,\n      accountNumber: 9127,\n    },\n    reduced: {\n      vat: 0.14,\n      accountNumber: 9128,\n    },\n  },\n  FR: {\n    country: \"FR\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 9129,\n    },\n    reduced: {\n      vat: 0.055,\n      accountNumber: 9130,\n    },\n  },\n  GR: {\n    country: \"GR\",\n    standard: {\n      vat: 0.24,\n      accountNumber: 9131,\n    },\n    reduced: {\n      vat: 0.13,\n      accountNumber: 9132,\n    },\n  },\n  HR: {\n    country: \"HR\",\n    standard: {\n      vat: 0.25,\n      accountNumber: 9133,\n    },\n    reduced: {\n      vat: 0.13,\n      accountNumber: 9134,\n    },\n  },\n  HU: {\n    country: \"HU\",\n    standard: {\n      vat: 0.27,\n      accountNumber: 9135,\n    },\n    reduced: {\n      vat: 0.27,\n      accountNumber: 9135,\n    },\n  },\n  IE: {\n    country: \"IE\",\n    standard: {\n      vat: 0.23,\n      accountNumber: 9137,\n    },\n    reduced: {\n      vat: 0.23,\n      accountNumber: 9137,\n    },\n  },\n  IT: {\n    country: \"IT\",\n    standard: {\n      vat: 0.22,\n      accountNumber: 9139,\n    },\n    reduced: {\n      vat: 0.1,\n      accountNumber: 9140,\n    },\n  },\n  LT: {\n    country: \"LT\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 9141,\n    },\n    reduced: {\n      vat: 0.21,\n      accountNumber: 9141,\n    },\n  },\n  LU: {\n    country: \"LU\",\n    standard: {\n      vat: 0.17,\n      accountNumber: 9143,\n    },\n    reduced: {\n      vat: 0.03,\n      accountNumber: 9144,\n    },\n  },\n  LV: {\n    country: \"LV\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 9145,\n    },\n    reduced: {\n      vat: 0.21,\n      accountNumber: 9145,\n    },\n  },\n  MT: {\n    country: \"MT\",\n    standard: {\n      vat: 0.18,\n      accountNumber: 9147,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 9148,\n    },\n  },\n  NL: {\n    country: \"NL\",\n    standard: {\n      vat: 0.21,\n      accountNumber: 9149,\n    },\n    reduced: {\n      vat: 0.09,\n      accountNumber: 9150,\n    },\n  },\n  PL: {\n    country: \"PL\",\n    standard: {\n      vat: 0.23,\n      accountNumber: 9151,\n    },\n    reduced: {\n      vat: 0.23,\n      accountNumber: 9151,\n    },\n  },\n  PT: {\n    country: \"PT\",\n    standard: {\n      vat: 0.23,\n      accountNumber: 9153,\n    },\n    reduced: {\n      vat: 0.23,\n      accountNumber: 9153,\n    },\n  },\n  RO: {\n    country: \"RO\",\n    standard: {\n      vat: 0.19,\n      accountNumber: 9155,\n    },\n    reduced: {\n      vat: 0.09,\n      accountNumber: 9156,\n    },\n  },\n  SI: {\n    country: \"SI\",\n    standard: {\n      vat: 0.22,\n      accountNumber: 9157,\n    },\n    reduced: {\n      vat: 0.095,\n      accountNumber: 9158,\n    },\n  },\n  SK: {\n    country: \"SK\",\n    standard: {\n      vat: 0.2,\n      accountNumber: 9159,\n    },\n    reduced: {\n      vat: 0.2,\n      accountNumber: 9159,\n    },\n  },\n  SE: {\n    country: \"SE\",\n    standard: {\n      vat: 0.25,\n      accountNumber: 2610,\n    },\n    reduced: {\n      vat: 0.12,\n      accountNumber: 2620,\n    },\n  },\n  PayPal: {\n    standard: {\n      vat: 0,\n      accountNumber: 1940,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 1940,\n    },\n  },\n  Stripe: {\n    standard: {\n      vat: 0,\n      accountNumber: 3105,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 3105,\n    },\n  },\n  NON_EU: {\n    standard: {\n      vat: 0,\n      accountNumber: 3105,\n    },\n    reduced: {\n      vat: 0,\n      accountNumber: 3105,\n    },\n  },\n};\n\nexport default VatAccounts;\n", "/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable no-shadow */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-use-before-define */\n\nexport interface Refund {\n  id: number;\n  date_created: string;\n  date_created_gmt: string;\n  amount: string;\n  reason: string;\n  refunded_by: number;\n  refunded_payment?: boolean;\n  meta_data: RefundMetaData[];\n  line_items: RefundLineItem[];\n  shipping_lines?: any[];\n  tax_lines?: RefundTaxLine[];\n  fee_lines?: any[];\n  _links?: RefundLinks;\n}\n\nexport interface RefundLinks {\n  self: Collection[];\n  collection: Collection[];\n  up: Collection[];\n}\n\nexport interface Collection {\n  href: string;\n}\n\nexport interface RefundLineItem {\n  id: number;\n  name: string;\n  product_id: number;\n  variation_id: number;\n  quantity: number;\n  tax_class: string; // TaxClass;\n  subtotal: string;\n  subtotal_tax: string;\n  total: string;\n  total_tax: string;\n  taxes: Tax[];\n  meta_data: ShippingLineMetaData[];\n  sku: string;\n  price: number;\n  parent_name?: null | string;\n}\n\nexport interface ShippingLineMetaData {\n  id: number;\n  key: Key;\n  value: string;\n  display_key: Key;\n  display_value: string;\n}\n\nexport enum Key {\n  Items = \"Items\",\n  RefundedItemID = \"_refunded_item_id\",\n  SmartSendAutoGenerateReturnLabel = \"smart_send_auto_generate_return_label\",\n  SmartSendReturnMethod = \"smart_send_return_method\",\n  SmartSendShippingMethod = \"smart_send_shipping_method\",\n}\n\nexport interface WcOrderGiftCard {\n  id: Readonly<number>;\n  code: Readonly<string>;\n  amount: Readonly<number>;\n}\n\nexport enum TaxClass {\n  Empty = \"\",\n  ReducedRate = \"reduced-rate\",\n  NormalRate = \"normal-rate\",\n}\n\nexport interface Tax {\n  id: number;\n  total: string;\n  subtotal: string;\n}\n\nexport interface RefundMetaData {\n  id: number;\n  key: string;\n  value: PurpleValue | string;\n}\n\nexport interface PurpleValue {\n  orders_count?: number;\n  avg_order_value?: number;\n  ltv?: number;\n}\n\nexport interface RefundTaxLine {\n  id: number;\n  rate_code: string;\n  rate_id: number;\n  label: string;\n  compound: boolean;\n  tax_total: string;\n  shipping_tax_total: string;\n  rate_percent: number;\n  meta_data: any[];\n}\n\nexport interface WcOrder {\n  id: number | string;\n  parent_id: number;\n  number: string;\n  order_key: string;\n  created_via: string;\n  version: string;\n  status: string;\n  currency: string;\n  date_created: string;\n  date_created_gmt: string;\n  date_modified: string;\n  date_modified_gmt: string;\n  discount_total: number | string;\n  discount_tax: number | string;\n  shipping_total: number | string;\n  shipping_tax: number | string;\n  cart_tax: number | string;\n  total: string;\n  total_tax: string;\n  prices_include_tax: boolean;\n  customer_id: number;\n  customer_ip_address: string;\n  customer_user_agent: string;\n  customer_note: string;\n  billing: Address;\n  shipping: Omit<Address, \"email\">;\n  payment_method: string;\n  payment_method_title: string;\n  transaction_id: string;\n  date_paid: string;\n  date_paid_gmt: string;\n  date_completed?: string;\n  date_completed_gmt?: string;\n  gift_cards?: WcOrderGiftCard[];\n  cart_hash: string;\n  meta_data: WcOrderMetaData[];\n  line_items: WcOrderLineItem[];\n  tax_lines: WcOrderTaxLine[];\n  shipping_lines: ShippingLine[];\n  fee_lines: any[];\n  coupon_lines: CouponLine[];\n  refunds: RefundElement[];\n  payment_url?: string;\n  currency_symbol?: string;\n  _links?: WcOrderLinks;\n  _wcpdf_document_link?: string;\n  _wc_order_key?: string;\n}\n\nexport interface WcOrderLinks {\n  self: Collection[];\n  collection: Collection[];\n  customer?: Collection[];\n}\n\nexport interface Address {\n  first_name: string;\n  last_name: string;\n  company: string;\n  address_1: string;\n  address_2: string;\n  city: string;\n  state: string;\n  postcode: string;\n  country: string;\n  email?: string;\n  phone?: string;\n}\n\nexport interface CouponLine {\n  id: number;\n  code: string;\n  discount: string;\n  discount_tax: string;\n  meta_data: CouponLineMetaData[];\n}\n\nexport interface CouponLineMetaData {\n  id: number;\n  key: string;\n  value: MetaDataDisplayValueClass;\n  display_key: string;\n  display_value: MetaDataDisplayValueClass;\n}\n\nexport interface MetaDataDisplayValueClass {}\n\nexport interface WcOrderLineItem {\n  id: number;\n  name: string;\n  product_id: number;\n  variation_id: number;\n  quantity: number;\n  tax_class: string; // TaxClass;\n  subtotal: string;\n  subtotal_tax: string;\n  total: string;\n  total_tax: string;\n  taxes: Tax[];\n  meta_data: PurpleMetaData[];\n  sku: string;\n  price: number;\n  parent_name?: null | string;\n  bundled_by?: number | string;\n  bundled_item_title?: string;\n  bundled_items?: number[];\n  composite_parent?: string;\n  composite_children?: any[];\n}\n\nexport interface PurpleMetaData {\n  id: number;\n  key: string;\n  value: string[] | Record<string, DisplayValueValue> | string;\n  display_key: string;\n  display_value: string[] | Record<string, DisplayValueValue> | string;\n}\n\nexport interface DisplayValueValue {\n  product_id: number;\n  quantity: number;\n  discount: string;\n}\n\nexport interface WcOrderMetaData {\n  id: number;\n  key: string;\n  value: any; // ValueElement[] | FluffyValue | string;\n}\n\nexport interface ValueElement {\n  tracking_provider?: string;\n  custom_tracking_provider?: string;\n  custom_tracking_link?: string;\n  tracking_number?: string;\n  date_shipped?: string;\n  tracking_id?: string;\n}\n\nexport interface FluffyValue {\n  fbc?: null;\n  fbp?: null | string;\n  zone_id?: string;\n  name?: string;\n  countries?: string[];\n  currency?: string;\n  exchange_rate?: string;\n  auto_exchange_rate?: string;\n  exchange_rate_fee?: number;\n  round_nearest?: string;\n  currency_format?: string;\n  price_thousand_sep?: string;\n  price_decimal_sep?: string;\n  price_num_decimals?: number;\n  disable_tax_adjustment?: string;\n  real_exchange_rate?: string;\n  round_after_taxes?: string;\n  trim_zeros?: string;\n  pys_landing?: string;\n  pys_source?: string;\n  pys_utm?: string;\n  pys_browser_time?: string;\n  orders_count?: number;\n  avg_order_value?: number;\n  ltv?: number;\n  header_logo?: string;\n  header_logo_height?: string;\n  shop_name?: Extra1;\n  shop_address?: Extra1;\n  footer?: Extra1;\n  extra_1?: Extra1;\n  extra_2?: Extra1;\n  extra_3?: Extra1;\n  number?: number;\n  formatted_number?: string;\n  prefix?: string;\n  suffix?: string;\n  document_type?: string;\n  order_id?: number;\n  padding?: string;\n}\n\nexport interface Extra1 {\n  default: string;\n}\n\nexport interface RefundElement {\n  id: number;\n  reason: string;\n  total: string;\n}\n\nexport interface ShippingLine {\n  id: number;\n  method_title: string;\n  method_id: string;\n  instance_id: string;\n  total: string;\n  total_tax: string;\n  taxes: Tax[];\n  meta_data: ShippingLineMetaData[];\n}\n\nexport interface WcOrderTaxLine {\n  id: number | string;\n  rate_code: string;\n  rate_id: number | string;\n  label: string;\n  compound: boolean;\n  tax_total: number | string;\n  shipping_tax_total: number | string;\n  meta_data: any[];\n  rate_percent?: number;\n}\n", "import type { RefundLineItem, Tax, WcOrderLineItem } from \"./types\";\nimport { TaxClass } from \"./types\";\n\nabstract class LineItems {\n  public static getTotalWithTax(item: WcOrderLineItem): number {\n    return (\n      (parseFloat(item.total) + parseFloat(item.total_tax)) /\n      (item.quantity === 0 ? 1 : item.quantity)\n    );\n  }\n\n  public static getAccurateTaxTotal(item: WcOrderLineItem): number {\n    if (!item.taxes) return 0;\n    let result = 0;\n    item.taxes.forEach((tax: Tax) => {\n      if (tax.total) result += parseFloat(tax.total);\n    });\n    return result;\n  }\n\n  public static getGiftCards(items: WcOrderLineItem[]): WcOrderLineItem[] {\n    return items.filter((item) => LineItems.isGiftCard(item));\n  }\n\n  public static isGiftCard(item: WcOrderLineItem): boolean {\n    return item.sku.includes(\"GIFTCARD\");\n  }\n\n  public static isGiftCardSKU(sku: string): boolean {\n    return sku.includes(\"GIFTCARD\");\n  }\n\n  public static tryVerifyRate(\n    item: WcOrderLineItem,\n    expectedVAT: number\n  ): void {\n    const itemVat = (parseFloat(item.total_tax) / item.price).toFixed(2);\n\n    if (itemVat !== expectedVAT.toFixed(2)) {\n      throw new Error(\n        `Item calculated VAT: '${itemVat}' doesn't match expected: ${expectedVAT}`\n      );\n    }\n  }\n\n  public static tryHasReducedRate(\n    item: WcOrderLineItem | RefundLineItem\n  ): boolean {\n    if (\n      !/\\b(reduced|normal)\\b-rate/.test(item.tax_class) &&\n      item.price !== 0 &&\n      item.tax_class !== \"\"\n    ) {\n      throw new Error(\n        \"Tax Class of Item in Orders are only expected to have either 'normal-rate' or 'reduced-rate' if cost of item is non-zero.\"\n      );\n    }\n    return item.tax_class === \"reduced-rate\";\n\n    if (item.tax_class === TaxClass.Empty)\n      throw new Error(\n        \"Tax Class of Item in Orders are only expected to have either 'normal-rate' or 'reduced-rate' if cost of item is non-zero.\"\n      );\n    return item.tax_class === TaxClass.ReducedRate;\n  }\n}\n\nexport default LineItems;\n", "const formatDate = (date: Date, timezoneOffset?: number): string => {\n  const offset = timezoneOffset ?? date.getTimezoneOffset();\n  date = new Date(new Date(date).getTime() - offset * 60 * 1000);\n  return date.toISOString().split(\"T\")[0];\n};\nexport default formatDate;\n", "const removeEmojis = (text: string): string => {\n  const emojiRegexpr =\n    /[\\u00A9\\u00AE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|(?:\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF6]|\\uD83E[\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0])/g;\n\n  return text.replace(emojiRegexpr, () => \"\");\n};\n\nexport default removeEmojis;\n", "const sanitizeTextForFortnox = (description: string): string => {\n  const replacement: Record<string, string> = {\n    \"\u2013\": \"-\",\n    \"~\": \"-\",\n    \"{\": \"(\",\n    \"}\": \")\",\n    \"[\": \"(\",\n    \"]\": \")\",\n    \"^\": \" \",\n    \"|\": \"-\",\n    \"\u00B7\": \"-\",\n  };\n  // U-0650 - Arabic Kasra: https://unicodeplus.com/U+0650\n  // TODO: '\u00B7' can't seem to get replaced with a '-', removing it completely for now.\n  return description\n    .replace(/u650|\u00B7/, \"\")\n    .replace(/[[\\]^{|}~\u2013]/g, (c) => replacement[c]);\n};\n\nexport default sanitizeTextForFortnox;\n", "export const toNumber = (value: Readonly<string | number>): number =>\n  typeof value === \"string\" ? parseFloat(value) : value;\n", "import type { Refund, RefundElement } from \"wooconvert\";\nimport type { Rate } from \"./Accounts\";\nimport CultureInfo from \"./CultureInfo\";\nimport * as LineItems from \"./LineItems\";\nimport type {\n  Customer,\n  Expense,\n  PayoutItemized,\n  WcOrder,\n  WcOrderLineItem,\n  WcOrderMetaData,\n  WcOrderTaxLine,\n} from \"./types\";\nimport type { PaymentMethod } from \"./types/PaymentMethod\";\nimport type { Required } from \"./utils\";\nimport { removeEmojis, sanitizeTextForFortnox } from \"./utils\";\nimport { toNumber } from \"./utils/toNumber\";\n\nexport interface TaxLabel {\n  vat: number;\n  label?: string;\n}\n\n// const DECIMAL_PRECISION_CURRENCY_RATE = 14;\n\nabstract class WcOrders {\n  public static tryVerifyOrder(order: WcOrder): void {\n    if (!order.prices_include_tax) {\n      throw new Error(\n        `Unexpected: 'prices_include_tax' is ${false}, expected: true`\n      );\n    }\n  }\n\n  public static getFilteredMetaDataByKeys(\n    meta_data: WcOrderMetaData[],\n    filtered_keys: string[]\n  ): WcOrderMetaData[] {\n    return meta_data.filter((datum) => filtered_keys.includes(datum.key));\n  }\n\n  public static getMetaDataValueByKey = (\n    object: WcOrder | WcOrderMetaData[],\n    matchKey: string\n  ): string | undefined =>\n    (Array.isArray(object) ? object : object.meta_data).find(\n      ({ key }) => key === matchKey\n    )?.value;\n\n  public static hasInvoiceReference = (order: WcOrder): boolean =>\n    order.meta_data.findIndex(\n      ({ key }) => key === \"_fortnox_invoice_reference\"\n    ) !== -1;\n\n  public static getInvoiceReference = (order: WcOrder): string | undefined =>\n    WcOrders.getMetaDataValueByKey(\n      order.meta_data,\n      \"_fortnox_invoice_reference\"\n    );\n\n  public static tryCreatePaymentFeeExpense(\n    order: WcOrder,\n    currencyRate: number,\n    paymentMethod: \"Stripe\" | \"PayPal\"\n  ): Expense {\n    const paymentFee = WcOrders.tryGetPaymentFee(order, paymentMethod);\n\n    if (\n      !paymentFee ||\n      paymentFee <= 0 ||\n      paymentFee >= parseFloat(order.total)\n    ) {\n      throw new Error(\n        `Unexpected fee amount for '${paymentMethod}': ${paymentFee}`\n      );\n    }\n\n    const expenseCodes = {\n      PayPal: \"PAPLFE\",\n      Stripe: \"STRPFE\",\n    };\n\n    return {\n      Code: expenseCodes[paymentMethod],\n      Text: `Betalningsavgift: ${order.id} via ${paymentMethod}`,\n      Account: 6570,\n      Debit: paymentFee,\n      Currency: WcOrders.tryGetCurrency(order),\n      CurrencyRate: WcOrders.tryVerifyCurrencyRate(order, currencyRate),\n    };\n  }\n\n  public static hasGiftCardsRedeem(order: WcOrder): boolean {\n    const { gift_cards } = order;\n    return Array.isArray(gift_cards) && gift_cards?.length > 0;\n  }\n\n  public static tryGetGiftCardsPurchases(order: WcOrder): {\n    hasGiftCards: boolean;\n    amountCurrency: number;\n    containsOnlyGiftCards: boolean;\n    giftCards: WcOrderLineItem[];\n  } {\n    const giftCards = LineItems.default.getGiftCards(order.line_items);\n    const hasGiftCards = giftCards.length > 0;\n\n    let amountCurrency = 0;\n\n    if (hasGiftCards) {\n      amountCurrency = WcOrders.tryGetAccurateTotal(order);\n    }\n\n    return {\n      hasGiftCards,\n      amountCurrency,\n      containsOnlyGiftCards:\n        hasGiftCards && amountCurrency === parseFloat(order.total),\n      giftCards,\n    };\n  }\n\n  public static tryGetPaymentFee(\n    order: WcOrder,\n    paymentMethod: string\n  ): number {\n    let paymentFee: number | undefined;\n\n    const getMetaData = (\n      metaDatas: WcOrderMetaData[],\n      key: string\n    ): WcOrderMetaData | undefined =>\n      metaDatas.find((value: WcOrderMetaData) => value.key === key);\n\n    if (paymentMethod === \"Stripe\") {\n      paymentFee = parseFloat(\n        getMetaData(order.meta_data, \"_stripe_fee\")?.value as string\n      );\n    } else if (paymentMethod === \"PayPal\") {\n      if (order.payment_method.includes(\"ppcp-gateway\")) {\n        paymentFee = parseFloat(\n          (\n            getMetaData(order.meta_data, \"_ppcp_paypal_fees\")?.value as Record<\n              \"paypal_fee\",\n              Record<\"value\", string>\n            >\n          ).paypal_fee.value\n        );\n      } else {\n        paymentFee = parseFloat(\n          getMetaData(order.meta_data, \"_paypal_transaction_fee\")\n            ?.value as string\n        );\n      }\n    }\n\n    if (!paymentFee) {\n      throw new Error(`Missing '${paymentMethod}' Payment Fee.`);\n    }\n\n    return paymentFee;\n  }\n\n  public static hasPaymentFee(order: WcOrder, paymentMethod: string): boolean {\n    const paymentFee = WcOrders.tryGetPaymentFee(order, paymentMethod);\n    return typeof paymentFee === \"number\" && paymentFee > 0;\n  }\n\n  public static getShippingTotal(order: WcOrder): number {\n    return typeof order.shipping_total === \"string\"\n      ? parseFloat(order.shipping_total)\n      : order.shipping_total;\n  }\n\n  public static getShippingTax(order: WcOrder): number {\n    return typeof order.shipping_tax === \"string\"\n      ? parseFloat(order.shipping_tax)\n      : order.shipping_tax;\n  }\n\n  public static tryGetPaymentMethod(order: WcOrder): PaymentMethod {\n    const { payment_method, payment_method_title } = order;\n\n    if (/^Stripe$|^PayPal$/.test(payment_method_title)) {\n      return payment_method_title as \"Stripe\" | \"PayPal\";\n    }\n\n    // NOTE: Matches stripe & stripe_{bancontant,ideal,sofort}, but not *_stripe\n\n    if (/^stripe\\S*/i.test(payment_method)) {\n      return \"Stripe\";\n    }\n    // NOTE: Matches paypal & (ppec_paypal)_paypal, but not paypal_*\n\n    if (/^\\S*paypal$/i.test(payment_method)) {\n      return \"PayPal\";\n    }\n\n    const { created_via, total, gift_cards } = order;\n\n    if (parseFloat(total) === 0 && gift_cards && gift_cards.length > 0) {\n      return \"GiftCard\";\n    }\n\n    if (/admin|checkout/i.test(created_via)) {\n      throw new Error(`Order was created manually by '${created_via}'.`);\n    }\n\n    throw new Error(\n      `Unexpected Payment Method: '${payment_method}', '${order.payment_method_title}. Order was created by '${created_via}'`\n    );\n  }\n\n  public static hasPaymentMethod(order: WcOrder): boolean {\n    try {\n      WcOrders.tryGetPaymentMethod(order);\n    } catch {\n      return false;\n    }\n    return true;\n  }\n\n  public static tryGetAccurateTotal(\n    order: WcOrder,\n    epsilon = 0.000_000_000_000_1\n  ): number {\n    let total = 0;\n\n    if (parseFloat(order.total) === 0) return 0;\n\n    order.line_items.forEach((item) => {\n      total +=\n        item.price * item.quantity +\n        LineItems.default.getAccurateTaxTotal(item);\n    });\n\n    // TODO: Is this correct?\n    total += WcOrders.getShippingTotal(order) + WcOrders.getShippingTax(order);\n\n    const diff = Math.abs(total - parseFloat(order.total));\n\n    if (diff > epsilon) {\n      const errorMessage = `WooCommerce order ${order.id} total does not match calculated total. Difference: WooCommerce: ${order.total}, calculated: ${total} = ${diff}`;\n\n      if (diff >= 0.01) {\n        throw new Error(errorMessage);\n      }\n      // TODO: Throw better non-critical error?\n      // console.log(errorMessage);\n    }\n\n    return total;\n  }\n\n  public static tryVerifyStripePayout(\n    order: WcOrder,\n    payout: PayoutItemized\n  ): void {\n    const currencyRate = this.getCurrencyRateFromStripeMetaData(\n      payout.fee,\n      payout.net,\n      this.tryGetAccurateTotal(order)\n    );\n\n    // TODO: Temporary catch to assert that this is more accurate than previous method.\n    if (currencyRate !== payout.exchange_rate) {\n      throw new Error(\n        `Calculated Currency Rate: ${currencyRate} does not match Stripe 'exchange_rate' : ${payout.exchange_rate}`\n      );\n    }\n  }\n\n  public static tryVerifyCurrencyRate(\n    order: WcOrder,\n    currencyRate: number\n  ): number | undefined {\n    const { currency } = order;\n\n    if (![\"EUR\", \"USD\", \"SEK\"].includes(currency)) {\n      throw new Error(\n        `Unexpected Currency: '${currency}', expected: EUR, USD or SEK.`\n      );\n    }\n\n    if (currency === \"SEK\" && currencyRate === 1) {\n      return currencyRate;\n    }\n\n    // NOTE: Lazy currency rate check for USD and EUR.\n    // Exchange rate is currently _atleast_ between 9 - 11 SEK, let's add 0.5 margin of error.\n\n    if (\n      [\"EUR\", \"USD\"].includes(currency) &&\n      currencyRate > 8.5 &&\n      currencyRate < 11.5\n    ) {\n      return currencyRate;\n    }\n\n    throw new Error(\n      `Unexpected Currency Rate for Currency: '${currency}' - Currency Rate: ${currencyRate}`\n    );\n  }\n\n  public static tryGetCurrency(order: WcOrder): \"SEK\" | \"EUR\" | \"USD\" {\n    if (!/SEK|EUR|USD/.test(order.currency)) {\n      throw new Error(\n        `Unexpected Currency: '${order.currency}', expected: SEK, EUR or USD.`\n      );\n    }\n    return order.currency as \"SEK\" | \"EUR\" | \"USD\";\n  }\n\n  private static getCurrencyRateFromStripeMetaData(\n    stripeFee: number | string,\n    stripeNet: number | string,\n    total: number\n  ): number {\n    return (toNumber(stripeFee) + toNumber(stripeNet)) / total;\n  }\n\n  // public static hasDifferingCurrencyRate(): boolean {\n  // }\n\n  public static getRefunds(\n    order: WcOrder\n  ): Refund[] | RefundElement[] | undefined {\n    if (!Object.prototype.hasOwnProperty.call(order.refunds, \"amount\")) {\n      return order.refunds as unknown as Refund[];\n    }\n    return order.refunds.length > 0\n      ? (order.refunds as RefundElement[])\n      : undefined;\n  }\n\n  public static isPartiallyRefunded(order: WcOrder): boolean {\n    return (\n      order.status === \"completed\" &&\n      (order.meta_data.some((d) => d.key === \"_stripe_refund_id\") ||\n        (order.refunds.length > 0 &&\n          order.refunds.reduce(\n            (total, current) => total + parseFloat(current.total ?? \"0\"),\n            0\n          ) !== 0))\n    );\n  }\n\n  /**\n   *\n   * @static\n   * @param {WcOrder} order\n   * @param {(number | string)} [stripeFee]\n   * @param {(number | string)} [stripeNet]\n   * @param {number} [accurateTotal]\n   * @return {*}  {number}\n   * @memberof WcOrders\n   */\n  public static tryGetCurrencyRate(\n    order: WcOrder,\n    stripeFee: number | string,\n    stripeNet: number | string,\n    accurateTotal?: number\n  ): number {\n    const paymentMethod = WcOrders.tryGetPaymentMethod(order);\n\n    if (paymentMethod !== \"Stripe\") {\n      throw new Error(\n        `Findus can only deduce Currency Rate with Stripe payments. Unsupported payment method: ${paymentMethod} - ${order.payment_method_title}`\n      );\n    }\n\n    if (\n      order.meta_data.some((d) => d.key === \"_stripe_refund_id\") ||\n      (order.refunds.length > 0 &&\n        order.refunds.reduce(\n          (total, current) => total + parseFloat(current.total ?? \"0\"),\n          0\n        ) !== 0)\n    ) {\n      throw new Error(\n        \"Cannot deduce Stripe Currency Rate if Order is partially refunded.\"\n      );\n    }\n\n    const stripeCharge = order.meta_data.find(\n      (d) => d.key === \"_stripe_charge_captured\"\n    )?.value as string;\n\n    /* NOTE: Deprecated - WooCommerce '_stripe_fee' and '_stripe_net' does not always correctly\n     * correspond to Stripe's actual values.\n    stripeFee =\n      stripeFee ??\n      (order.meta_data.find((d) => d.key === \"_stripe_fee\")?.value as string);\n    stripeNet =\n      stripeFee ??\n      (order.meta_data.find((d) => d.key === \"_stripe_net\")?.value as string);\n    */\n\n    const stripeCurrency = order.meta_data.find(\n      (d) => d.key === \"_stripe_currency\"\n    )?.value as string;\n\n    if (!stripeCharge || parseFloat(stripeCharge) <= 0) {\n      throw new Error(\n        `Unexpected: Order 'meta_data' of key '_stripe_charge_captured' has value '${stripeCharge}' `\n      );\n    }\n\n    if (!stripeFee || toNumber(stripeFee) <= 0) {\n      throw new Error(`Invalid value of stripeNet: ${stripeFee}`);\n    }\n\n    if (!stripeNet || toNumber(stripeNet) < 0) {\n      throw new Error(`Invalid value of stripeNet: ${stripeNet}`);\n    }\n\n    if (!stripeCurrency) {\n      throw new Error(\n        `Unexpected: Order 'meta_data' of key '_stripe_currency' has value '${stripeCurrency}' `\n      );\n    }\n\n    if (stripeCurrency !== \"SEK\") {\n      throw new Error(\n        `Stripe Payment with currency: ${stripeCurrency} is unexpected.`\n      );\n    }\n\n    if (`${order.currency}-${stripeCurrency}` === \"SEK-SEK\") return 1;\n\n    const total = accurateTotal ?? WcOrders.tryGetAccurateTotal(order);\n    const stripeCurrencyRate = this.getCurrencyRateFromStripeMetaData(\n      stripeFee,\n      stripeNet,\n      total\n    );\n\n    try {\n      WcOrders.tryVerifyCurrencyRate(order, stripeCurrencyRate);\n    } catch (error) {\n      throw new Error(\n        `Failed to verify calculated Currency Rate for Stripe payment: ${stripeCurrencyRate}, ${error}`\n      );\n    }\n\n    return stripeCurrencyRate;\n  }\n\n  public static verifyRateForItem(\n    order: WcOrder,\n    rate: Rate,\n    item: WcOrderLineItem\n  ): TaxLabel {\n    if (rate.vat === 0) {\n      return { vat: 0, label: \"0% Vat\" };\n    }\n\n    const taxRates = WcOrders.tryGetTaxRateLabels(order.tax_lines);\n    let taxLabel: TaxLabel;\n\n    if (Object.is(taxRates.standard, taxRates.reduced)) {\n      taxLabel = taxRates.standard;\n    } else {\n      if (item.tax_class === \"\") {\n        throw new Error(\n          `Unexpected empty tax class for item: '${item.name}', expected either 'normal-rate' or 'reduced-rate'`\n        );\n      }\n      const isStandard = item.tax_class !== \"reduced-rate\";\n      taxLabel = isStandard ? taxRates.standard : taxRates.reduced;\n    }\n\n    if (rate.vat !== taxLabel.vat) {\n      throw new Error(\n        `VAT Rate miss-match, expected value: ${rate.vat} VAT, but WooCommerce gave: ${taxLabel.vat}% VAT, with label: ${taxLabel.label}`\n      );\n    }\n    return taxLabel;\n  }\n\n  public static getPaymentDate = (order: WcOrder): string =>\n    new Date(order.date_paid).toLocaleDateString(\"sv-SE\");\n\n  public static getTaxRate(tax: WcOrderTaxLine): number {\n    const taxLabel = tax.label;\n\n    try {\n      // eslint-disable-next-line unicorn/no-unsafe-regex\n      const regex = /(?:\\d+(?:\\.\\d*)?|\\.\\d+)%/;\n      // Throws error on undefined\n      const vat = regex.exec(taxLabel);\n\n      if (!vat || vat.length !== 1) {\n        throw new Error(\n          `Could not parse VAT Percentage from Tax Label: ${taxLabel}`\n        );\n      }\n      return parseFloat(vat[0]) / 100;\n    } catch {\n      throw new Error(`Unexpected Tax label: ${taxLabel}`);\n    }\n  }\n\n  public static tryGetTaxRateLabels(taxes: WcOrderTaxLine[]): {\n    standard: TaxLabel;\n    reduced: TaxLabel;\n  } {\n    let labels: TaxLabel[] = [];\n\n    taxes.forEach((tax: WcOrderTaxLine) => {\n      const vat = WcOrders.getTaxRate(tax);\n      const taxLabel = { vat, label: tax.label };\n\n      if (!taxLabel) {\n        throw new Error(\"Missing tax label\");\n      }\n\n      // Make sure lowest VAT is the last value in tuple\n      if (labels[0]?.vat >= vat) labels.push(taxLabel);\n      else labels = [taxLabel, ...labels];\n    });\n\n    return { standard: labels[0], reduced: labels[1] };\n  }\n\n  public static getDocumentSource(order: WcOrder): string | null {\n    return order.meta_data.find(\n      (entry: WcOrderMetaData) => entry.key === \"pdf_invoice_source\"\n    )?.value as string;\n  }\n\n  public static getStorefrontUrl(order: WcOrder): string | undefined {\n    return order.meta_data.find(\n      (entry: WcOrderMetaData) => entry.key === \"storefront_url\"\n    )?.value as string;\n  }\n\n  public static getStorefrontPrefix(order: WcOrder): string | undefined {\n    return order.meta_data.find(\n      (entry: WcOrderMetaData) => entry.key === \"storefront_prefix\"\n    )?.value as string;\n  }\n\n  public static createDocumentLink(\n    orderId: string | number,\n    storefrontUrl: string,\n    orderKey: string\n  ): string {\n    return `${storefrontUrl}/wp-admin/admin-ajax.php?action=generate_wpo_wcpdf&template_type=invoice&order_ids=${orderId}&order_key=${orderKey}`;\n  }\n\n  public static tryGetDocumentLink(\n    order: WcOrder,\n    storefrontUrl?: string\n  ): string {\n    // Try to get Document link from metadata\n    const pdfLink = order.meta_data.find(\n      (entry: WcOrderMetaData) => entry.key === \"_wcpdf_document_link\"\n    )?.value as string;\n\n    if (pdfLink && pdfLink !== \"\") {\n      return pdfLink;\n    }\n    // Try to get Order key from metadata\n    let orderKey = order.meta_data.find(\n      (entry: WcOrderMetaData) => entry.key === \"_wc_order_key\"\n    )?.value;\n\n    if (!orderKey) {\n      orderKey = order.order_key;\n    }\n\n    if (!orderKey) {\n      throw new Error(`Order is missing document_link and order_key`);\n    }\n\n    if (!storefrontUrl) {\n      const storeUrl = WcOrders.getStorefrontUrl(order);\n\n      if (!storeUrl) {\n        throw new Error(`Could not get 'storefront_url' from order meta_data`);\n      }\n\n      let orderId = order.id;\n\n      // Remove optional storefront_prefix from order ID\n      if (typeof orderId === \"string\" && orderId.includes(\"-\")) {\n        orderId = orderId.split(\"-\")[1];\n      }\n\n      return this.createDocumentLink(orderId, storeUrl, orderKey);\n    }\n\n    return `${storefrontUrl}/wp-admin/admin-ajax.php?action=generate_wpo_wcpdf&template_type=invoice&order_ids=${order.id}&order_key=${orderKey}`;\n  }\n\n  public static tryGetInvoiceReference(order: WcOrder): number {\n    if (!order.meta_data) return 0;\n    const reference = order.meta_data.find(\n      (entry: WcOrderMetaData) => entry.key === \"_fortnox_invoice_number\"\n    )?.value as string;\n\n    if (!reference) {\n      throw new Error(\n        `Order is missing '_fortnox_invoice_number' referenced in meta data.`\n      );\n    }\n    return parseInt(reference, 10);\n  }\n\n  public static tryCanBeRefunded(order: WcOrder): boolean {\n    if (order.status === \"completed\" && order.refunds?.length === 0) {\n      throw new Error(\n        \"Order status is 'completed' but has no partial refunds.\"\n      );\n    } else if (order.status !== \"refunded\") {\n      throw new Error(\n        `Unexpected order status: '${order.status}', expected full refund 'refunded' or partial refund 'completed'.`\n      );\n    }\n    return true;\n  }\n\n  public static tryGetCustomerName(order: WcOrder): string {\n    let customerName: string | undefined;\n\n    try {\n      customerName = this.tryGetBillingName(order);\n    } catch {\n      try {\n        customerName = this.tryGetDeliveryName(order);\n      } catch {\n        throw new Error(\n          `Order is missing customer name for 'billing' and failed to fallback to 'shipping'`\n        );\n      }\n    }\n\n    if (!customerName) {\n      throw new Error(`Missing customer name for order`);\n    }\n\n    return sanitizeTextForFortnox(customerName);\n  }\n\n  public static tryGetDeliveryName(order: WcOrder): string {\n    if (order.shipping.first_name || order.shipping.last_name) {\n      return removeEmojis(\n        `${order.shipping.first_name} ${order.shipping.last_name}`\n      ).trim();\n    }\n    throw new Error(`Order is missing customer name for shipping`);\n  }\n\n  public static tryGetBillingName(order: WcOrder): string {\n    if (order.billing.first_name || order.billing.last_name) {\n      return removeEmojis(\n        `${order.billing.first_name} ${order.billing.last_name}`\n      ).trim();\n    }\n    throw new Error(`Order is missing customer name for billing`);\n  }\n\n  public static tryGetCustomerEmail(order: WcOrder): string {\n    // TODO: Verify email is valid\n    if (order.billing.email) {\n      return order.billing.email;\n    }\n    throw new Error(`Order is missing customer email in billing.`);\n  }\n\n  public static tryGetCustomerAddresses(\n    order: WcOrder\n  ): Required<Customer, \"CountryCode\" | \"DeliveryCountryCode\"> {\n    const sanitizePostCode = (\n      postCode: string | undefined,\n      cityName?: string\n    ): string | undefined => {\n      if (postCode && postCode.length > 10) {\n        if (cityName) {\n          postCode = postCode.replace(cityName, \"\");\n        }\n\n        if (postCode.length > 10) {\n          return postCode.slice(0, 10);\n        }\n      }\n      return postCode;\n    };\n\n    const CountryCode = CultureInfo.tryGetCountryIso(order.billing.country);\n\n    const DeliveryCountryCode = CultureInfo.tryGetCountryIso(\n      order.shipping.country\n    );\n\n    if (!CountryCode) {\n      throw new Error(\n        `Failed to create customer, failed to determine 'order.billing.country'`\n      );\n    }\n\n    if (!DeliveryCountryCode) {\n      throw new Error(\n        `Failed to create customer, failed to determine 'order.shipping.country'`\n      );\n    }\n\n    return {\n      CountryCode,\n      DeliveryCountryCode,\n\n      Address1: sanitizeTextForFortnox(order.billing.address_1),\n      Address2: sanitizeTextForFortnox(order.billing.address_2),\n      ZipCode: sanitizePostCode(order.billing.postcode, order.shipping.city),\n      City: sanitizeTextForFortnox(order.billing.city),\n\n      DeliveryName: sanitizeTextForFortnox(WcOrders.tryGetDeliveryName(order)),\n      DeliveryAddress1: sanitizeTextForFortnox(order.shipping.address_1),\n      DeliveryAddress2: sanitizeTextForFortnox(order.shipping.address_2),\n      DeliveryZipCode: sanitizePostCode(\n        order.shipping.postcode,\n        order.shipping.city\n      ),\n      DeliveryCity: sanitizeTextForFortnox(order.shipping.city),\n    };\n  }\n}\n\nexport default WcOrders;\n", "import CultureInfo from \"./CultureInfo\";\nimport SalesAccounts from \"./data/SalesAccounts\";\nimport VatAccounts from \"./data/VATAccounts\";\nimport LineItems from \"./LineItems\";\nimport type { WcOrder, WcOrderLineItem } from \"./types\";\nimport createMapFromRecord from \"./utils/createMapFromRecord\";\nimport WcOrders from \"./WcOrders\";\n\nexport interface Rate {\n  vat: number;\n  accountNumber: number;\n}\n\nexport interface Account {\n  country?: string;\n  standard: Rate;\n  reduced?: Rate;\n}\n\nabstract class Accounts {\n  private static readonly vat = createMapFromRecord<string, Account>(\n    VatAccounts\n  );\n\n  private static readonly sales = createMapFromRecord<string, Account>(\n    SalesAccounts\n  );\n\n  public static getRate(\n    countryIso: string,\n    isReduced = false,\n    paymentMethod?: string | undefined\n  ): Rate {\n    const account = this.tryGetSalesAccount(countryIso, paymentMethod);\n\n    if (isReduced) {\n      return account.reduced ?? account.standard;\n    }\n    return account.standard;\n  }\n\n  public static tryGetSalesAccountForOrder(order: WcOrder): Account {\n    const countryIso = order.billing.country;\n    const paymentMethod = WcOrders.tryGetPaymentMethod(order);\n\n    return this.tryGetSalesAccount(countryIso, paymentMethod);\n  }\n\n  public static tryGetSalesRateForItem(\n    order: WcOrder,\n    item: WcOrderLineItem\n  ): Rate {\n    const account = Accounts.tryGetSalesAccountForOrder(order);\n\n    if (LineItems.tryHasReducedRate(item)) {\n      return account.reduced ?? account.standard;\n    }\n    return account.standard;\n  }\n\n  public static tryGetSalesAccount(\n    countryIso: string,\n    paymentMethod?: string\n  ): Account {\n    if (this.sales.has(countryIso)) {\n      const account = this.sales.get(countryIso);\n\n      if (!account)\n        throw new Error(`Missing Sales Account for country: ${countryIso}`);\n      return account;\n    }\n\n    if (!CultureInfo.isInsideEU(countryIso)) {\n      return this.sales.get(\"NON_EU\") as Account;\n    }\n\n    if (!paymentMethod) {\n      throw new Error(\n        `Payment Method is required for orders outside EU: ${countryIso}`\n      );\n    }\n\n    const account = this.sales.get(paymentMethod) as Account;\n\n    if (!account)\n      throw new Error(\n        `Missing Sales Account for Payment Method: ${paymentMethod}`\n      );\n    return account;\n  }\n\n  public static getVatAccount(\n    countryIso: string,\n    paymentMethod?: string\n  ): Account {\n    if (this.vat.has(countryIso)) {\n      const account = this.vat.get(countryIso);\n\n      if (!account)\n        throw new Error(`Missing VAT Account for country: ${countryIso}`);\n      return account;\n    }\n\n    if (!paymentMethod) {\n      throw new Error(\n        `Payment Method is required for orders outside EU: ${countryIso}`\n      );\n    }\n\n    const account = this.vat.get(paymentMethod) as Account;\n\n    if (!account)\n      throw new Error(\n        `Missing VAT Account for Payment Method: ${paymentMethod}`\n      );\n    return account;\n  }\n}\n\nexport default Accounts;\n", "import type { Article, WcOrder, WcOrderLineItem } from \"./types\";\n\nabstract class Articles {\n  public static sanitizeTextForFortnox(description: string): string {\n    const replacement: Record<string, string> = {\n      \"\u2013\": \"-\",\n      \"~\": \"-\",\n      \"{\": \"(\",\n      \"}\": \")\",\n      \"[\": \"(\",\n      \"]\": \")\",\n      \"^\": \" \",\n      \"|\": \"-\",\n    };\n    return description.replace(/[[\\]^{|}~\u2013]/g, (c) => replacement[c]);\n  }\n\n  public static createArticles(order: WcOrder): Article[] {\n    const articles = [];\n\n    for (const item of order.line_items) {\n      articles.push(Articles.createArticle(item));\n    }\n    return articles;\n  }\n\n  private static createArticle(item: WcOrderLineItem): Article {\n    return {\n      ArticleNumber: item.sku,\n      Description: Articles.sanitizeTextForFortnox(item.name),\n      Type: \"STOCK\",\n    } as Article;\n  }\n}\n\nexport default Articles;\n", "import CultureInfo from \"./CultureInfo\";\nimport type { Customer, CustomerVatTypes, WcOrder } from \"./types\";\nimport type { Required } from \"./utils\";\nimport WcOrders from \"./WcOrders\";\n\nabstract class Customers {\n  public static getCustomerVatType(countryNameOrIso: string): CustomerVatTypes {\n    const countryIso = CultureInfo.tryGetCountryIso(countryNameOrIso);\n\n    if (CultureInfo.isInsideEU(countryIso)) {\n      if (/se/i.test(countryIso)) {\n        return \"SEVAT\";\n      }\n      return \"EUVAT\";\n    }\n    return \"EXPORT\";\n  }\n\n  public static tryCreateCustomer(\n    order: WcOrder,\n    requireShippingAddress = true\n  ): Customer {\n    let addresses:\n      | undefined\n      | Required<Customer, \"CountryCode\" | \"DeliveryCountryCode\">;\n    let VATType: undefined | CustomerVatTypes;\n\n    try {\n      addresses = WcOrders.tryGetCustomerAddresses(order);\n\n      VATType = Customers.getCustomerVatType(addresses.DeliveryCountryCode);\n    } catch (error) {\n      if (requireShippingAddress) {\n        throw new Error((error as Error).message);\n      }\n    }\n\n    return {\n      Name: WcOrders.tryGetCustomerName(order),\n      Type: \"PRIVATE\",\n      Email: WcOrders.tryGetCustomerEmail(order),\n      VATType,\n      ...addresses,\n    };\n  }\n}\n\nexport default Customers;\n", "/* eslint-disable class-methods-use-this */\nimport type { RefundElement } from \"wooconvert\";\nimport type { Rate } from \"./Accounts\";\nimport Accounts from \"./Accounts\";\nimport Articles from \"./Articles\";\nimport CultureInfo from \"./CultureInfo\";\nimport LineItems from \"./LineItems\";\nimport type {\n  Article,\n  Invoice,\n  InvoicePayment,\n  InvoiceRow,\n  InvoiceRowInit,\n  Refund,\n  WcOrder,\n  WcOrderGiftCard,\n} from \"./types\";\nimport type RefundItem from \"./types/RefundItem\";\nimport { formatDate } from \"./utils\";\nimport WcOrders from \"./WcOrders\";\n\nexport default abstract class Invoices {\n  public static tryCanBeRefunded(invoice: Invoice): boolean {\n    if (invoice.Cancelled === true) {\n      throw new Error(\"Invoice has already been Cancelled.\");\n    } else if (invoice.Booked === true) {\n      throw new Error(\"Invoice has not been Booked in Fortnox.\");\n    } else if (invoice.CreditInvoiceReference) {\n      throw new Error(\"Invoice has an existing Credit Invoice\");\n    }\n    return true;\n  }\n\n  public static tryGetInvoiceCurrencyAmount(invoice: Invoice): number {\n    let calculatedTotal = 0;\n    invoice.InvoiceRows.forEach((row) => {\n      calculatedTotal += row.Price * (row.DeliveredQuantity ?? 1);\n    });\n\n    if (invoice.Total && invoice.Total !== calculatedTotal) {\n      throw new Error(\n        `Calculated Total: ${calculatedTotal} of Invoice does not match Fortnox assigned total: ${invoice.Total}`\n      );\n    }\n\n    if (calculatedTotal === 0) {\n      throw new Error(`Unexpected zero value total for Invoice`);\n    }\n    return calculatedTotal;\n  }\n\n  public static tryCreateInvoicePayment(\n    invoice: Invoice,\n    currencyRate: number | undefined | null,\n    paymentDate: Date,\n    paymentStatus: \"completed\" | \"refunded\" | string\n  ): InvoicePayment {\n    const currencyAmount = Invoices.tryGetInvoiceCurrencyAmount(invoice);\n    const CurrencyRate = currencyRate ?? invoice.CurrencyRate;\n\n    if (!/completed|refunded|partial refund/.test(paymentStatus)) {\n      throw new TypeError(`Invalid value for paymentStatus: ${paymentStatus}`);\n    }\n\n    if (!CurrencyRate) {\n      throw new TypeError(`Missing Currency Rate for Invoice Payment.`);\n    }\n\n    const invoicePayment: InvoicePayment = {\n      InvoiceNumber: invoice.DocumentNumber,\n      Amount: currencyAmount * CurrencyRate,\n      AmountCurrency: currencyAmount,\n      PaymentDate: formatDate(paymentDate),\n      CurrencyRate,\n      Currency: invoice.Currency,\n      PaymentStatus: paymentStatus as \"completed\" | \"refunded\",\n    };\n\n    return invoicePayment;\n  }\n\n  public static tryGetHighestVATAccount(invoice: Invoice): {\n    VAT: number;\n    AccountNumber: number;\n  } {\n    let vat: number | undefined;\n    let account: number | undefined;\n    invoice.InvoiceRows.forEach((row: InvoiceRow) => {\n      if (!vat || (row.VAT && row.VAT > vat)) {\n        vat = row.VAT;\n        account = row.AccountNumber;\n      }\n    });\n\n    if (!vat || !account) {\n      throw new Error(\n        `Failed to find valid VAT or AccountNumber for Invoice ${\n          invoice.DocumentNumber ?? \"\"\n        }`\n      );\n    }\n    return { VAT: vat, AccountNumber: account };\n  }\n\n  public static tryCreateRefundObject(\n    invoice: Invoice,\n    refunds: Refund[]\n  ): RefundItem[] | undefined {\n    const refundItems: RefundItem[] = [];\n\n    for (const refund of refunds) {\n      const { reason, id } = refund;\n      const refundItem: RefundItem = { items: [], reason, id: id.toString() };\n\n      let expectedAmount = 0;\n      let actualAmount = 0;\n\n      expectedAmount = parseFloat((refund as Refund).amount);\n\n      if (expectedAmount <= 0) {\n        throw new Error(\n          `Unexpected Refund Amount: ${expectedAmount}, expected to be a positive number for refund: '${reason}'`\n        );\n      }\n\n      const invoiceRowSimple = (item: InvoiceRow): InvoiceRowInit => {\n        if (item.AccountNumber === undefined) {\n          throw new Error(\n            `Unexpected missing AccountNumber for InvoiceRow Item: ${item.ArticleNumber}, for refund: '${reason}'`\n          );\n        }\n\n        if (item.VAT === undefined) {\n          throw new Error(\n            `Unexpected missing AccountNumber for InvoiceRow Item: ${item.ArticleNumber}, for refund: '${reason}'`\n          );\n        }\n\n        if (item.DeliveredQuantity === undefined) {\n          throw new Error(\n            `Unexpected missing DeliveredQuantity for InvoiceRow Item: ${item.ArticleNumber}, for refund: '${reason}'`\n          );\n        }\n\n        return {\n          ArticleNumber: item.ArticleNumber,\n          AccountNumber: item.AccountNumber as number,\n          VAT: item.VAT,\n          DeliveredQuantity: item.DeliveredQuantity as number,\n          Price: item.Price,\n        };\n      };\n\n      const defaultAccountAndVat = Invoices.tryGetHighestVATAccount(invoice);\n\n      // if (refunds.length === 1) {\n      if (refund.reason === \"Refund Shipping\") {\n        for (const item of invoice.InvoiceRows) {\n          if (item.ArticleNumber.startsWith(\"Shipping\")) {\n            refundItem.items.push(invoiceRowSimple(item));\n\n            actualAmount += item.Price;\n          }\n        }\n      } else if (/discount/i.test(reason)) {\n        // TODO: Which account do we use when we apply discount?\n        throw new Error(`Missing Implementation, for refund: '${reason}'`);\n\n        refundItem.items.push({\n          ArticleNumber: \"Discount\",\n          Price: expectedAmount,\n          DeliveredQuantity: 1,\n          ...defaultAccountAndVat,\n        });\n        actualAmount = expectedAmount;\n        /* } else {\n\n          let ArticleNumber: string | undefined;\n\n          if (reason.startsWith(\"Refunded, replaced with\")) {\n            ArticleNumber = \"Refund.Replaced.Item\";\n          } else if (reason.startsWith(\"Wrong\")) {\n            ArticleNumber = \"Refund.Wrong.Item\";\n          } else if (reason.startsWith(\"Shipment\")) {\n            ArticleNumber = \"Refund.Shipment\";\n          } else {\n            ArticleNumber = sanitizeTextForFortnox(\n              reason.replace(\",\", \".\").replace(\" \", \".\")\n            );\n          }\n          refundItem.items.push({\n            ArticleNumber,\n            Price: expectedAmount,\n            DeliveredQuantity: 1,\n            ...defaultAccountAndVat,\n          });\n          actualAmount = expectedAmount;\n          */\n      } else {\n        // Only keep items that match sku and price in refund\n        for (const item of invoice.InvoiceRows) {\n          if (item.Price > 0) {\n            for (const refundLineItem of refund.line_items) {\n              const refundPrice = -LineItems.getTotalWithTax(refundLineItem);\n\n              if (refundLineItem.sku === item.ArticleNumber) {\n                if (-refundPrice !== item.Price) {\n                  throw new Error(\n                    `Refund amount missmatch for ${\n                      item.ArticleNumber\n                    }, expected ${\n                      item.Price\n                    }, got ${-refundPrice}, for refund: '${reason}'`\n                  );\n                }\n\n                refundItem.items.push(invoiceRowSimple(item));\n                actualAmount += -refundPrice;\n              }\n            }\n          }\n        }\n      }\n\n      if (Math.abs(expectedAmount - actualAmount) > 0.000_000_1) {\n        throw new Error(\n          `Invalid Refund amount, expected: ${expectedAmount}, got: ${actualAmount}, for refund: '${reason}'`\n        );\n      }\n\n      if (refundItem.items.length > 0) {\n        refundItems.push(refundItem);\n      }\n    }\n    return refundItems.length > 0 ? refundItems : undefined;\n  }\n\n  public static tryCreatePartialRefund(\n    /* invoice: Invoice, */\n    creditInvoice: Partial<Invoice>,\n    refunds: Refund[] | RefundElement[]\n  ): Partial<Invoice> {\n    if (\n      creditInvoice.Credit === false ||\n      !creditInvoice.InvoiceRows ||\n      !(creditInvoice.InvoiceRows?.length >= 0)\n    ) {\n      throw new Error(\"Credit Invoice for Partial refund is invalid.\");\n    }\n\n    const creditRows = creditInvoice.InvoiceRows as InvoiceRow[];\n    creditInvoice.InvoiceRows = [];\n\n    for (const refund of refunds) {\n      const simpleRefund = !Object.prototype.hasOwnProperty.call(\n        refund,\n        \"amount\"\n      );\n\n      let expectedAmount = 0;\n      let amount = 0;\n\n      if (simpleRefund) {\n        expectedAmount = parseFloat((refund as RefundElement).total);\n      } else {\n        expectedAmount = parseFloat((refund as Refund).amount);\n      }\n\n      if (refunds.length === 1 && simpleRefund) {\n        if (refund.reason === \"Refund Shipping\") {\n          for (const refundItem of creditRows) {\n            if (refundItem.ArticleNumber.startsWith(\"Shipping\")) {\n              creditInvoice.InvoiceRows.push(refundItem);\n              amount += refundItem.Price;\n            }\n          }\n        } else if (/discount/i.test(refund.reason)) {\n          // TODO: Which account do we use when we apply discount?\n          throw new Error(\"Missing Implementation\");\n          creditInvoice.InvoiceRows = [\n            {\n              ArticleNumber: \"Discount\",\n              Price: expectedAmount,\n              AccountNumber: -1,\n            },\n          ];\n          amount = expectedAmount;\n          // } else if (refund.reason === \"Refund\") {\n        } else {\n          throw new Error(`Unexpected refund: ${refund.reason}`);\n        }\n      } else {\n        // Only keep invoice rows that match item in refund\n        for (const row of creditRows) {\n          if (row.Price > 0) {\n            for (const refundItem of (refund as Refund).line_items) {\n              const refundPrice = LineItems.getTotalWithTax(refundItem);\n\n              if (\n                refundItem.sku === row.ArticleNumber &&\n                refundPrice === -row.Price\n              ) {\n                const isReduced = LineItems.tryHasReducedRate(refundItem);\n                const isGiftCard = LineItems.isGiftCard(refundItem);\n                const hasVat = parseFloat(refundItem.total_tax) > 0;\n\n                let vat = row.VAT;\n                let accountNumber = row.AccountNumber;\n\n                const vatCountry =\n                  creditInvoice.DeliveryCountry ?? creditInvoice.Country;\n\n                if (!vatCountry || vatCountry === \"\") {\n                  throw new Error(\n                    `Credit Invoice is missing valid Country for VAT: ${vatCountry}`\n                  );\n                }\n\n                const vatCountryISO = CultureInfo.tryGetCountryIso(vatCountry);\n\n                ({ vat, accountNumber } = isGiftCard\n                  ? { vat: 0, accountNumber: 2421 }\n                  : Accounts.getRate(vatCountryISO, isReduced));\n\n                if (\n                  vat * 100 !== row.VAT ||\n                  accountNumber !== row.AccountNumber ||\n                  (hasVat && vat > 0)\n                ) {\n                  throw new Error(\n                    `Wrong calculated VAT for refunded Item in Credit Invoice: ${vat}%, ${accountNumber}, expected ${\n                      row.VAT\n                    }%, ${row.AccountNumber}${\n                      hasVat ? \"\" : \". VAT should be 0% in both cases\"\n                    }`\n                  );\n                }\n\n                creditInvoice.InvoiceRows?.push(row);\n                amount += refundPrice;\n              }\n            }\n          }\n        }\n      }\n\n      // Verify that expected Refund amount match Credit Invoice rows\n      if (-amount !== expectedAmount) {\n        throw new Error(\n          `Invalid Refund amount: -${amount}, expected: ${expectedAmount}`\n        );\n      }\n    }\n\n    return creditInvoice;\n  }\n\n  public static tryCreateRefundedCreditInvoice(\n    invoice: Invoice,\n    refunds: Refund[]\n  ): Invoice {\n    const creditInvoiceRows: InvoiceRow[] = [];\n\n    for (const refund of refunds) {\n      const expectedAmount = parseFloat(refund.amount);\n      let actualAmount = 0;\n\n      for (const item of refund.line_items) {\n        // eslint-disable-next-line no-loop-func\n        invoice.InvoiceRows.forEach((row) => {\n          if (item.sku === row.ArticleNumber) {\n            const totalPrice = -(\n              parseFloat(item.total) + parseFloat(item.total_tax)\n            );\n\n            if (totalPrice > 0) {\n              const refundedQuantity = Math.round(totalPrice / row.Price);\n              const itemPrice = totalPrice / refundedQuantity;\n\n              if (refundedQuantity * itemPrice !== totalPrice) {\n                throw new Error(\n                  `Calculated Item Price of ${itemPrice}, is inaccurate, ${refundedQuantity} * ${itemPrice} !== ${totalPrice}`\n                );\n              }\n\n              actualAmount += totalPrice;\n\n              creditInvoiceRows.push({\n                ...row,\n                Price: itemPrice,\n                DeliveredQuantity: -refundedQuantity,\n              });\n            }\n          }\n        });\n      }\n\n      if (Math.abs(actualAmount - expectedAmount) > 0.000_001)\n        throw new Error(\n          `Failed to create Refund, expected: ${expectedAmount}, but instead got: ${actualAmount}`\n        );\n    }\n    return { ...invoice, InvoiceRows: creditInvoiceRows };\n  }\n\n  public static tryCreateFullRefund(\n    order: WcOrder,\n    creditInvoice: Partial<Invoice>\n  ): Partial<Invoice> {\n    const invoiceRows: InvoiceRow[] = [];\n\n    order.line_items.forEach((item): void => {\n      const price = LineItems.getTotalWithTax(item);\n\n      if (price > 0) {\n        const account = Accounts.tryGetSalesRateForItem(order, item);\n        invoiceRows.push({\n          ArticleNumber: item.sku,\n          DeliveredQuantity: -item.quantity,\n          AccountNumber: account.accountNumber,\n          Price: price,\n        });\n      }\n    });\n    return {\n      ...creditInvoice,\n      InvoiceRows: invoiceRows,\n    };\n  }\n\n  private static tryGenerateCashPaymentInvoice(\n    order: WcOrder,\n    storefrontPrefix: \"ND\" | \"GB\",\n    containsOnlyGiftCards = false\n  ): Omit<Invoice, \"CurrencyRate\" | \"InvoiceRows\"> {\n    const paymentMethod = WcOrders.tryGetPaymentMethod(order);\n\n    const Country = CultureInfo.tryGetEnglishName(order.billing.country);\n\n    let DeliveryCountry: string | undefined;\n\n    if (!containsOnlyGiftCards) {\n      DeliveryCountry = CultureInfo.tryGetEnglishName(order.shipping.country);\n    }\n\n    const InvoiceDate = new Date(order.date_paid).toLocaleDateString(\"sv-SE\");\n    const InvoiceType = paymentMethod === \"Stripe\" ? \"INVOICE\" : \"CASHINVOICE\";\n    const PaymentWay = paymentMethod === \"Stripe\" ? undefined : \"CASH\";\n\n    const YourOrderNumber = `${storefrontPrefix}-${order.id}`;\n\n    return {\n      InvoiceDate,\n      DueDate: InvoiceDate,\n      InvoiceType,\n      PaymentWay,\n\n      TermsOfPayment: \"0\",\n\n      /* AccountingMethod: \"CASH\", */\n\n      Currency: WcOrders.tryGetCurrency(order),\n\n      Country,\n      DeliveryCountry,\n\n      VATIncluded: true,\n\n      YourOrderNumber,\n\n      // YourReference: \"findus\",\n\n      // Customer\n      /* CustomerName: WcOrders.tryGetCustomerName(order),\n      DeliveryName: WcOrders.tryGetDeliveryName(order),\n      EmailInformation: {\n        EmailAddressTo: order.billing.email,\n      },\n\n      ...WcOrders.tryGetAddresses(order), */\n    };\n  }\n\n  private static tryGenerateInvoiceRows(\n    order: WcOrder,\n    paymentMethod: \"Stripe\" | \"PayPal\" | \"GiftCard\",\n    expectedTotal?: number\n  ): InvoiceRow[] {\n    const invoiceRows: InvoiceRow[] = [];\n\n    let highestRate: Rate = { vat: -1, accountNumber: -1 };\n\n    order.line_items.sort((itemA, itemB): number => itemB.price - itemA.price);\n\n    for (const item of order.line_items) {\n      const isReduced = LineItems.tryHasReducedRate(item);\n\n      const { vat, accountNumber } = LineItems.isGiftCard(item)\n        ? { vat: 0, accountNumber: 2421 }\n        : Accounts.getRate(order.billing.country, isReduced, paymentMethod);\n\n      if (item.price > 0 && vat > highestRate.vat) {\n        highestRate = { vat, accountNumber };\n      }\n\n      // LineItems.tryVerifyRate(item, vat);\n\n      invoiceRows.push({\n        AccountNumber: accountNumber,\n        VAT: parseFloat((vat * 100).toString().slice(0, 16)),\n        ArticleNumber: item.sku,\n        Description: Articles.sanitizeTextForFortnox(item.name),\n        DeliveredQuantity: item.quantity,\n        Price: LineItems.getTotalWithTax(item),\n      });\n    }\n\n    if (highestRate.vat === -1) {\n      throw new Error(\"Could not determine VAT of items in order.\");\n    }\n\n    Invoices.tryAddShippingCost(invoiceRows, order, highestRate);\n    Invoices.tryAddGiftCardExpense(invoiceRows, order);\n    Invoices.tryAddRounding(invoiceRows, order, expectedTotal);\n    /*     Invoices.tryAddPaymentFeeCost(\n      invoiceRows,\n      order,\n      currencyRate,\n      paymentMethod\n    );\n */\n    return invoiceRows;\n  }\n\n  private static tryAddPaymentFeeCost(\n    invoiceRows: InvoiceRow[],\n    order: WcOrder,\n    currencyRate: number,\n    paymentMethod: \"Stripe\" | \"PayPal\"\n  ): void {\n    let paymentFee: number | undefined;\n    WcOrders.tryVerifyCurrencyRate(order, currencyRate);\n\n    let currency: \"SEK\" | \"USD\" | \"EUR\" | undefined;\n\n    let debit: number | undefined;\n\n    if (paymentMethod === \"Stripe\") {\n      const stripeCurrency = order.meta_data.find(\n        (data) => data.key === \"_stripe_currency\"\n      )?.value;\n\n      if (stripeCurrency !== \"SEK\") {\n        throw new Error(\n          `Unxepected Currency for Stripe Charge: ${stripeCurrency}`\n        );\n      }\n      paymentFee = WcOrders.tryGetPaymentFee(order, paymentMethod);\n      debit = paymentFee / currencyRate;\n    } else {\n      currency = WcOrders.tryGetCurrency(order);\n      paymentFee =\n        WcOrders.tryGetPaymentFee(order, paymentMethod) * currencyRate;\n\n      if (currency === \"SEK\") {\n        if (currencyRate !== 1) {\n          throw new Error(\n            `Invalid SEK Currency Rate for PayPal Payment Fee: ${currencyRate}`\n          );\n        }\n      } else if (currencyRate === 1) {\n        throw new Error(\n          `Non SEK Currency: ${currency}, for PayPal Payment Fee expected valid Currency rate.`\n        );\n      }\n      debit = paymentFee / currencyRate;\n    }\n\n    invoiceRows.push({\n      AccountNumber: 6570,\n      ArticleNumber: `PaymentFee.${paymentMethod}`,\n      Description: `Payment Fee: ${order.id} via ${paymentMethod}`,\n      DeliveredQuantity: 1,\n      Price: -debit,\n    });\n  }\n\n  public static hasGiftCardRedeem(invoice: Invoice): boolean {\n    return invoice.InvoiceRows.some((item) =>\n      item.ArticleNumber.includes(\"GIFTCARD-REDEEM\")\n    );\n  }\n\n  private static tryAddRounding(\n    invoiceRows: InvoiceRow[],\n    order: WcOrder,\n    expectedTotal?: number\n  ): void {\n    const { total } = order;\n    const ROUNDING_THRESHOLD = 0.05;\n    const ROUNDING_MINIMUM = 0.01;\n    const diff =\n      (expectedTotal ??\n        WcOrders.tryGetAccurateTotal(order, ROUNDING_THRESHOLD)) -\n      parseFloat(total);\n\n    if (diff === 0) return;\n\n    // TODO: Is this the same for all Currencies?\n    if (Math.abs(diff) > ROUNDING_THRESHOLD) {\n      throw new Error(\n        `Unexpected rounding ${diff}, expected total: ${\n          expectedTotal ??\n          WcOrders.tryGetAccurateTotal(order, ROUNDING_THRESHOLD)\n        }, order total: ${total}`\n      );\n    }\n\n    if (Math.abs(diff) > ROUNDING_MINIMUM) {\n      invoiceRows.push({\n        AccountNumber: 3740,\n        ArticleNumber: \"ROUNDING\",\n        Description: \"Rounding\",\n        DeliveredQuantity: 1,\n        Price: diff,\n      });\n    }\n  }\n\n  public static tryCreateGiftCardRedeemArticles(\n    invoice: Invoice,\n    allowEmpty = false\n  ): Article[] {\n    const articles: Article[] = [];\n\n    invoice.InvoiceRows.forEach((item): void => {\n      const { ArticleNumber, Description } = item;\n\n      if (ArticleNumber.includes(\"GIFTCARD-REDEEM\"))\n        articles.push({ ArticleNumber, Description: Description ?? \"\" });\n    });\n\n    if (articles.length === 0) {\n      if (allowEmpty) {\n        return [];\n      }\n      throw new Error(\"Invoice is missing expected Gift Card Redeem\");\n    }\n\n    return articles;\n  }\n\n  private static tryAddGiftCardExpense(\n    invoiceRows: InvoiceRow[],\n    order: WcOrder\n  ): void {\n    const { gift_cards } = order;\n\n    if (!WcOrders.hasGiftCardsRedeem(order)) return;\n\n    const storePrefix = WcOrders.getMetaDataValueByKey(\n      order,\n      \"_storefront_prefix\"\n    );\n\n    gift_cards?.forEach((card: WcOrderGiftCard) => {\n      const { code } = card;\n      invoiceRows.push({\n        AccountNumber: 2421,\n        ArticleNumber: `${\n          storePrefix ? `${storePrefix}.` : \"\"\n        }GIFTCARD-REDEEM.${code}`,\n\n        Description: `${\n          storePrefix ? `${storePrefix} - ` : \"\"\n        }Gift Card Redeem: ${code}`,\n        Price: -card.amount,\n        DeliveredQuantity: 1,\n      });\n    });\n  }\n\n  private static tryAddShippingCost(\n    invoiceRows: InvoiceRow[],\n    order: WcOrder,\n    rate: Rate\n  ): void {\n    const shippingCost = WcOrders.getShippingTotal(order);\n\n    if (shippingCost === 0) {\n      return;\n    }\n\n    const shippingTax = WcOrders.getShippingTax(order);\n    const calculatedVat = Math.abs(shippingTax / shippingCost);\n\n    if (calculatedVat - rate.vat > 1e-3) {\n      const isReduced = calculatedVat < rate.vat;\n      rate = Accounts.getRate(order.billing.country, isReduced);\n\n      if (calculatedVat - rate.vat > 1e-3) {\n        throw new Error(\n          `Shipping Rate Missmatch: ${calculatedVat * 100}% VAT, expected ${\n            rate.vat * 100\n          }% VAT`\n        );\n      }\n    }\n\n    invoiceRows.push({\n      AccountNumber: rate.accountNumber,\n      ArticleNumber: \"Shipping.Cost\",\n      Description: \"Fraktkostnad\",\n      DeliveredQuantity: 1,\n      Price: shippingCost + shippingTax,\n      VAT: rate.vat * 100,\n    });\n\n    /*\n    if (\n      !CultureInfo.isInsideEU(order.billing.country)\n    ) {\n      shippingTax = 0;\n      /*\n      throw new Error(\n        `Unexpected shipping Tax for Order outside EU. Tax: ${shippingTax}, Country: ${order.billing.country}. Expected '0'`\n      );\n    }\n    if (shippingTax !== 0) {\n      const account = Accounts.tryGetSalesAccountForOrder(order);\n      let accountNumber = 0;\n      let vat = 0;\n\n      const wooShippingRate = shippingTax / shippingCost;\n\n      if (account.reduced?.vat.toFixed(3) === wooShippingRate.toFixed(3)) {\n        accountNumber = account.reduced.accountNumber;\n        vat = account.reduced.vat;\n      } else if (\n        account.standard?.vat.toFixed(3) === wooShippingRate.toFixed(3)\n      ) {\n        accountNumber = account.standard.accountNumber;\n        vat = account.standard.vat;\n      } else {\n        throw new Error(\n          `Shipping VAT Account not found. VAT: ${wooShippingRate}, expected either reduced: ${account.reduced?.vat}, or standard: ${account.standard.vat} - ${rate.vat}`\n        );\n      }\n\n      invoiceRows.push({\n        AccountNumber: accountNumber,\n        ArticleNumber: \"Shipping.Cost.VAT\",\n        Description: `Fraktkostnad - ${(vat * 100).toFixed(2)}% Moms`,\n        DeliveredQuantity: 1,\n        Price: shippingTax,\n      });\n    } */\n  }\n\n  public static tryCreateInvoice(\n    order: WcOrder,\n    currencyRate: number,\n    storefrontPrefix: \"GB\" | \"ND\",\n    expectedOrderStatus: \"completed\" | \"refunded\" | string = \"completed\",\n    expectedTotal?: number\n  ): Invoice {\n    if (order.status !== expectedOrderStatus) {\n      throw new Error(`Unexpected order status: '${order.status}'`);\n    }\n\n    if (!order.billing.email) {\n      throw new Error(\"Order is missing customer email in 'billing'\");\n    }\n\n    const { containsOnlyGiftCards } = WcOrders.tryGetGiftCardsPurchases(order);\n\n    const paymentMethod = WcOrders.tryGetPaymentMethod(order);\n\n    const invoice: Invoice = {\n      ...this.tryGenerateCashPaymentInvoice(\n        order,\n        storefrontPrefix,\n        containsOnlyGiftCards\n      ),\n\n      InvoiceDate: WcOrders.getPaymentDate(order),\n\n      CurrencyRate: WcOrders.tryVerifyCurrencyRate(order, currencyRate),\n\n      InvoiceRows: Invoices.tryGenerateInvoiceRows(\n        order,\n        paymentMethod,\n        expectedTotal\n      ),\n    };\n\n    return invoice;\n  }\n}\n", "import type { PayoutItemized, WcOrder } from \"./types\";\n// import { parse } from \"csv-string\";\n\nexport default abstract class StripePayouts {\n  public static tryGetOrderId(\n    stripePayout: PayoutItemized,\n    provider?: \"ND\" | \"GB\"\n  ): string {\n    const { description } = stripePayout;\n\n    if (/refund/i.test(description)) return \"\";\n\n    const result = /(\\d{4,})$/m.exec(description);\n\n    if (!result) {\n      throw new Error(\n        `Failed to get Order Id from Payout description: ${description}`\n      );\n    }\n    const orderIdNr = result[0];\n\n    if (provider) return `${provider}-${orderIdNr}`;\n\n    if (description.includes(\"Gamerbulk\")) {\n      return `GB-${orderIdNr}`;\n    }\n\n    if (description.includes(\"NAU Shop\")) {\n      return `ND-${orderIdNr}`;\n    }\n\n    throw new Error(`Invalid Provider for Stripe Payout: ${description}`);\n  }\n\n  public static tryVerifyStripePayout(\n    order: WcOrder,\n    stripePayout: PayoutItemized\n  ): void {\n    try {\n      const { exchange_rate } = stripePayout;\n\n      if (\n        Math.abs(\n          parseFloat(order.total) * (exchange_rate ?? 1) -\n            parseFloat(stripePayout.gross)\n        ) > 0.1\n      ) {\n        throw new Error(\n          `Order total '${\n            parseFloat(order.total) * (exchange_rate ?? 1)\n          }' does not match Stripe Payout gross: '${stripePayout.gross}'`\n        );\n      }\n\n      const wcStripeFee = parseFloat(\n        order.meta_data.find(({ key }) => key === \"_stripe_fee\")?.value\n      );\n      const wcStripeNet = parseFloat(\n        order.meta_data.find(({ key }) => key === \"_stripe_net\")?.value\n      );\n      const wcStripeCurrency = order.meta_data.find(\n        ({ key }) => key === \"_stripe_currency\"\n      )?.value;\n\n      if (wcStripeFee !== parseFloat(stripePayout.fee)) {\n        throw new Error(\n          `Order Stripe Fee '${wcStripeFee}' does not match Stripe Payout Fee: '${stripePayout.fee}'`\n        );\n      }\n\n      if (wcStripeNet !== parseFloat(stripePayout.net)) {\n        throw new Error(\n          `Order Stripe Net '${wcStripeNet}' does not match Stripe Payout Net: '${stripePayout.net}'`\n        );\n      }\n\n      if (wcStripeCurrency !== stripePayout.currency.toUpperCase()) {\n        throw new Error(\n          `Order Stripe Currency '${wcStripeCurrency}' does not match Stripe Payout Currency: '${stripePayout.currency.toUpperCase()}'`\n        );\n      }\n    } catch (error) {\n      throw new Error(\n        `Failed to verify Stripe Payout: ${(error as Error).message}`\n      );\n    }\n  }\n}\n", "import type { SupplierInvoice, WcOrder } from \"./types\";\nimport WcOrders from \"./WcOrders\";\n\nexport default class SupplierInvoices {\n  private static tryCreateBasicSupplierInvoice(\n    order: WcOrder,\n    currency: \"SEK\" | \"USD\" | \"EUR\",\n    currencyRate?: number\n  ): SupplierInvoice {\n    const paymentMethod = WcOrders.tryGetPaymentMethod(order);\n    const dateString = new Date(\n      order.date_paid as unknown as string\n    ).toLocaleDateString(\"sv-SE\");\n\n    if (currencyRate === 100) {\n      throw new Error(\"Placeholder\");\n    }\n\n    return {\n      InvoiceNumber: order.id as string,\n      Currency: currency,\n      // CurrencyRate: currencyRate,\n      InvoiceDate: dateString,\n      DueDate: dateString,\n      // SupplierNumber: WcOrders.tryGetPaymentMethod(order),\n      SupplierNumber: paymentMethod === \"PayPal\" ? \"54\" : \"55\",\n\n      SalesType: \"STOCK\",\n      SupplierInvoiceRows: [],\n    };\n  }\n\n  public static tryCreatePaymentFeeInvoice(\n    order: WcOrder,\n    currencyRate = 1\n  ): SupplierInvoice {\n    const paymentMethod = WcOrders.tryGetPaymentMethod(order);\n\n    if (paymentMethod === \"GiftCard\") {\n      throw new Error(\"Cannot create payment fee for Gift Card purchases\");\n    }\n\n    const expense = WcOrders.tryCreatePaymentFeeExpense(\n      order,\n      currencyRate,\n      paymentMethod\n    );\n    let currency: \"SEK\" | \"USD\" | \"EUR\" | undefined;\n\n    if (paymentMethod === \"Stripe\") {\n      const stripeCurrency = order.meta_data.find(\n        (data) => data.key === \"_stripe_currency\"\n      )?.value;\n\n      if (stripeCurrency !== \"SEK\") {\n        throw new Error(\n          `Unxepected Currency for Stripe Charge: ${stripeCurrency}`\n        );\n      }\n      currency = \"SEK\";\n      currencyRate = 1;\n    } else {\n      currency = WcOrders.tryGetCurrency(order);\n\n      if (currency === \"SEK\") {\n        if (currencyRate !== 1) {\n          throw new Error(\n            `Invalid SEK Currency Rate for Supplier Invoice: ${currencyRate}`\n          );\n        }\n      } else if (currencyRate === 1) {\n        throw new Error(\n          `Non SEK Currency: ${currency}, for '${paymentMethod}' fee, Supplier Invoice expects valid Currency rate`\n        );\n      }\n    }\n\n    const invoice = SupplierInvoices.tryCreateBasicSupplierInvoice(\n      order,\n      currency,\n      currencyRate\n    );\n\n    invoice.Total = expense.Debit;\n\n    return invoice;\n  }\n}\n", "/* eslint-disable class-methods-use-this */\n\nimport type { Invoice, WcOrder } from \"./types\";\n\n/**\n * @description\n * Takes an Array<V>, and a grouping function,\n * and returns a Map of the array grouped by the grouping function.\n *\n * @param list An array of type V.\n * @param keyGetter A Function that takes the the Array type V as an input, and returns a value of type K.\n *                  K is generally intended to be a property key of V.\n *\n * @returns Map of the array grouped by the grouping function.\n */ // https://stackoverflow.com/a/38327540\nexport function groupBy<K, V>(\n  list: V[],\n  keyGetter: (input: V) => K\n): Map<K, V[]> {\n  const map = new Map<K, V[]>();\n  list.forEach((item) => {\n    const key = keyGetter(item);\n    const collection = map.get(key);\n\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n}\n\ninterface InvoiceAccrualRow {\n  Account?: number;\n  Debit?: number;\n  Credit?: number;\n  TransactionInformation?: string;\n}\n\nexport default class Verification {\n  public static tryCreateVerification(\n    invoice: Invoice,\n    order?: WcOrder,\n    withPaymentFee = false\n    // expense?: Expense\n  ): InvoiceAccrualRow[] {\n    const result: InvoiceAccrualRow[] = [];\n\n    groupBy(invoice.InvoiceRows, (row) => row.AccountNumber).forEach(\n      (rows, account) => {\n        let credit = 0;\n        let description: string | undefined;\n\n        rows.forEach((row) => {\n          credit += row.Price * (row.DeliveredQuantity ?? 1);\n\n          if (!description) description = row.Description;\n        });\n\n        result.push({\n          Account: account,\n          Debit: 0,\n          Credit: parseFloat(credit.toFixed(8)),\n          TransactionInformation: description,\n        });\n      }\n    );\n\n    if (withPaymentFee && !order) {\n      throw new Error(\n        \"Order missing for Verification with optional Payment Fee.\"\n      );\n    }\n\n    /*\n      let paymentMethod: string | undefined;\n      try {\n        paymentMethod = WcOrders.tryGetPaymentMethod(order);\n        // eslint-disable-next-line no-empty\n      } catch {}\n\n      if (paymentMethod && WcOrders.hasPaymentFee(order, paymentMethod)) {\n        const paymentFee = WcOrders.tryGetPaymentFee(order, paymentMethod);\n        result.push({\n          Account: (expense ?? WcOrders.tryCreatePaymentFeeExpense(order))\n            .Account,\n          Debit: paymentFee,\n          TransactionInformation: `Utg\u00E5ende Betalningsavgift: ${paymentMethod}`,\n        });\n      }\n      */\n\n    return result.sort((a, b) => {\n      if (!a.Account || !b.Account) return 0;\n\n      if (a.Account < 5000) return b.Account - a.Account;\n      return a.Account - b.Account;\n    });\n  }\n\n  // TODO: Add PaymentFee to Verifikat / Accrual Invoice\n  /*\n  public static addPaymentFee(\n    invoiceRows: InvoiceRowInit[], // AccrualInvoiceRows?\n    order: WcOrder,\n    rate: Rate,\n    paymentMethod: \"Stripe\" | \"PayPal\"\n  ) {\n    let feeData: MetaData | undefined;\n\n    const getMetaData = (\n      metaDatas: MetaData[],\n      key: string\n    ): MetaData | undefined =>\n      metaDatas.find((value: MetaData) => value.key === key);\n\n    if (paymentMethod === \"Stripe\") {\n      feeData = getMetaData(order.metaData, \"_stripe_fee\");\n    } else if (paymentMethod === \"PayPal\") {\n      feeData = getMetaData(order.metaData, \"_paypal_transaction_fee\");\n    }\n\n    if (!feeData || parseFloat(feeData.value) < 0) {\n      throw new Error(`Unexpected Fee: ${paymentMethod}`);\n    }\n    const fee = parseFloat(feeData.value);\n\n    if (fee <= 0 || fee >= parseFloat(order.total)) {\n      throw new Error(`Unexpected fee amount for '${feeData.key}': ${fee}`);\n    }\n\n    let salesAccount = Accounts.getSalesAccount(order.billing.country)\n\n    invoiceRows.push({\n                accountNumber:\n                credit: fee,\n                info: $\"{paymentMethod} Avgift - Utg\u00E5ende\"\n    });\n\n    invoiceRows.push({accountNumber: 6570, debit: fee, info: `${paymentMethod} Avgift`});\n  }\n  */\n}\n", "import type { Voucher, WcOrder } from \"./types\";\nimport WcOrders from \"./WcOrders\";\n\nexport default abstract class Vouchers {\n  public static tryCreateVoucherForPaymentFee(\n    order: WcOrder,\n    currencyRate: number,\n    storefrontPrefix: \"ND\" | \"GB\",\n    paymentMethod_?: \"Stripe\" | \"PayPal\"\n  ): Voucher {\n    WcOrders.tryVerifyCurrencyRate(order, currencyRate);\n\n    // let currency: \"SEK\" | \"USD\" | \"EUR\" | undefined;\n\n    let debit: number | undefined;\n\n    const paymentMethod = paymentMethod_ ?? WcOrders.tryGetPaymentMethod(order);\n    const paymentFee = WcOrders.tryGetPaymentFee(order, paymentMethod);\n\n    if (paymentMethod === \"Stripe\") {\n      const stripeCurrency = order.meta_data.find(\n        (data) => data.key === \"_stripe_currency\"\n      )?.value;\n\n      if (stripeCurrency !== \"SEK\") {\n        throw new Error(\n          `Unxepected Currency for Stripe Charge: ${stripeCurrency}`\n        );\n      }\n      debit = paymentFee;\n    } else {\n      debit = paymentFee * currencyRate;\n    }\n\n    return {\n      Description: `Payment Fee: ${storefrontPrefix}-${order.id} via ${paymentMethod}`,\n      TransactionDate: WcOrders.getPaymentDate(order),\n      VoucherSeries: \"B\",\n      VoucherRows: [\n        {\n          Account: paymentMethod === \"PayPal\" ? 1940 : 1930,\n          Debit: 0,\n          Credit: debit,\n        },\n        {\n          Account: 6570,\n          Debit: debit,\n          Credit: 0,\n        },\n      ],\n    };\n  }\n}\n"],
  "mappings": "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ACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,KACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,KACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,OAAQ,CACN,SAAU,CACR,IAAK,EACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,EACA,OAAQ,CACN,SAAU,CACR,IAAK,EACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,EACA,OAAQ,CACN,SAAU,CACR,IAAK,EACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,CACF,EACO,EAAQ,GCzUf,GAAM,IAAc,CAClB,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,KACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,KACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,GACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,GACL,cAAe,IACjB,CACF,EACA,GAAI,CACF,QAAS,KACT,SAAU,CACR,IAAK,IACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,IACL,cAAe,IACjB,CACF,EACA,OAAQ,CACN,SAAU,CACR,IAAK,EACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,EACA,OAAQ,CACN,SAAU,CACR,IAAK,EACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,EACA,OAAQ,CACN,SAAU,CACR,IAAK,EACL,cAAe,IACjB,EACA,QAAS,CACP,IAAK,EACL,cAAe,IACjB,CACF,CACF,EAEO,EAAQ,GCjRR,GAAK,GAAL,CAAK,GACV,SAAQ,QACR,iBAAiB,oBACjB,mCAAmC,wCACnC,wBAAwB,2BACxB,0BAA0B,6BALhB,WAcA,EAAL,CAAK,GACV,SAAQ,GACR,cAAc,eACd,aAAa,cAHH,WCpEZ,WAAyB,OACT,iBAAgB,EAA+B,CAC3D,MACG,YAAW,EAAK,KAAK,EAAI,WAAW,EAAK,SAAS,GAClD,GAAK,WAAa,EAAI,EAAI,EAAK,SAEpC,OAEc,qBAAoB,EAA+B,CAC/D,GAAI,CAAC,EAAK,MAAO,MAAO,GACxB,GAAI,GAAS,EACb,SAAK,MAAM,QAAQ,AAAC,GAAa,CAC/B,AAAI,EAAI,OAAO,IAAU,WAAW,EAAI,KAAK,EAC/C,CAAC,EACM,CACT,OAEc,cAAa,EAA6C,CACtE,MAAO,GAAM,OAAO,AAAC,GAAS,EAAU,WAAW,CAAI,CAAC,CAC1D,OAEc,YAAW,EAAgC,CACvD,MAAO,GAAK,IAAI,SAAS,UAAU,CACrC,OAEc,eAAc,EAAsB,CAChD,MAAO,GAAI,SAAS,UAAU,CAChC,OAEc,eACZ,EACA,EACM,CACN,GAAM,GAAW,YAAW,EAAK,SAAS,EAAI,EAAK,OAAO,QAAQ,CAAC,EAEnE,GAAI,IAAY,EAAY,QAAQ,CAAC,EACnC,KAAM,IAAI,OACR,yBAAyB,8BAAoC,GAC/D,CAEJ,OAEc,mBACZ,EACS,CACT,GACE,CAAC,4BAA4B,KAAK,EAAK,SAAS,GAChD,EAAK,QAAU,GACf,EAAK,YAAc,GAEnB,KAAM,IAAI,OACR,2HACF,EAEF,MAAO,GAAK,YAAc,cAO5B,CACF,EAEO,EAAQ,ECnEf,GAAM,IAAa,CAAC,EAAY,IAAoC,CAClE,GAAM,GAAS,GAAkB,EAAK,kBAAkB,EACxD,SAAO,GAAI,MAAK,GAAI,MAAK,CAAI,EAAE,QAAQ,EAAI,EAAS,GAAK,GAAI,EACtD,EAAK,YAAY,EAAE,MAAM,GAAG,EAAE,EACvC,EACO,EAAQ,GCLf,GAAM,IAAe,AAAC,GAAyB,CAC7C,GAAM,GACJ,03CAEF,MAAO,GAAK,QAAQ,EAAc,IAAM,EAAE,CAC5C,EAEO,EAAQ,GCPf,GAAM,IAAyB,AAAC,GAAgC,CAC9D,GAAM,GAAsC,CAC1C,SAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,OAAK,GACP,EAGA,MAAO,GACJ,QAAQ,SAAU,EAAE,EACpB,QAAQ,eAAgB,AAAC,GAAM,EAAY,EAAE,CAClD,EAEO,EAAQ,GCnBR,GAAM,GAAW,AAAC,GACvB,MAAO,IAAU,SAAW,WAAW,CAAK,EAAI,ECwBlD,WAAwB,OACR,gBAAe,EAAsB,CACjD,GAAI,CAAC,EAAM,mBACT,KAAM,IAAI,OACR,uCAAuC,oBACzC,CAEJ,OAEc,2BACZ,EACA,EACmB,CACnB,MAAO,GAAU,OAAO,AAAC,GAAU,EAAc,SAAS,EAAM,GAAG,CAAC,CACtE,OAqBc,4BACZ,EACA,EACA,EACS,CACT,GAAM,GAAa,EAAS,iBAAiB,EAAO,CAAa,EAEjE,GACE,CAAC,GACD,GAAc,GACd,GAAc,WAAW,EAAM,KAAK,EAEpC,KAAM,IAAI,OACR,8BAA8B,OAAmB,GACnD,EAQF,MAAO,CACL,KAAM,AANa,CACnB,OAAQ,SACR,OAAQ,QACV,EAGqB,GACnB,KAAM,qBAAqB,EAAM,UAAU,IAC3C,QAAS,KACT,MAAO,EACP,SAAU,EAAS,eAAe,CAAK,EACvC,aAAc,EAAS,sBAAsB,EAAO,CAAY,CAClE,CACF,OAEc,oBAAmB,EAAyB,CACxD,GAAM,CAAE,cAAe,EACvB,MAAO,OAAM,QAAQ,CAAU,GAAK,kBAAY,QAAS,CAC3D,OAEc,0BAAyB,EAKrC,CACA,GAAM,GAAY,AAAU,EAAQ,aAAa,EAAM,UAAU,EAC3D,EAAe,EAAU,OAAS,EAEpC,EAAiB,EAErB,MAAI,IACF,GAAiB,EAAS,oBAAoB,CAAK,GAG9C,CACL,eACA,iBACA,sBACE,GAAgB,IAAmB,WAAW,EAAM,KAAK,EAC3D,WACF,CACF,OAEc,kBACZ,EACA,EACQ,CA5HZ,UA6HI,GAAI,GAEE,EAAc,CAClB,EACA,IAEA,EAAU,KAAK,AAAC,GAA2B,EAAM,MAAQ,CAAG,EAwB9D,GAtBA,AAAI,IAAkB,SACpB,EAAa,WACX,KAAY,EAAM,UAAW,aAAa,IAA1C,cAA6C,KAC/C,EACS,IAAkB,UAC3B,CAAI,EAAM,eAAe,SAAS,cAAc,EAC9C,EAAa,WAET,MAAY,EAAM,UAAW,mBAAmB,IAAhD,cAAmD,OAInD,WAAW,KACf,EAEA,EAAa,WACX,KAAY,EAAM,UAAW,yBAAyB,IAAtD,cACI,KACN,GAIA,CAAC,EACH,KAAM,IAAI,OAAM,YAAY,iBAA6B,EAG3D,MAAO,EACT,OAEc,eAAc,EAAgB,EAAgC,CAC1E,GAAM,GAAa,EAAS,iBAAiB,EAAO,CAAa,EACjE,MAAO,OAAO,IAAe,UAAY,EAAa,CACxD,OAEc,kBAAiB,EAAwB,CACrD,MAAO,OAAO,GAAM,gBAAmB,SACnC,WAAW,EAAM,cAAc,EAC/B,EAAM,cACZ,OAEc,gBAAe,EAAwB,CACnD,MAAO,OAAO,GAAM,cAAiB,SACjC,WAAW,EAAM,YAAY,EAC7B,EAAM,YACZ,OAEc,qBAAoB,EAA+B,CAC/D,GAAM,CAAE,iBAAgB,wBAAyB,EAEjD,GAAI,oBAAoB,KAAK,CAAoB,EAC/C,MAAO,GAKT,GAAI,cAAc,KAAK,CAAc,EACnC,MAAO,SAIT,GAAI,eAAe,KAAK,CAAc,EACpC,MAAO,SAGT,GAAM,CAAE,cAAa,QAAO,cAAe,EAE3C,GAAI,WAAW,CAAK,IAAM,GAAK,GAAc,EAAW,OAAS,EAC/D,MAAO,WAGT,KAAI,kBAAkB,KAAK,CAAW,EAC9B,GAAI,OAAM,kCAAkC,KAAe,EAG7D,GAAI,OACR,+BAA+B,QAAqB,EAAM,+CAA+C,IAC3G,CACF,OAEc,kBAAiB,EAAyB,CACtD,GAAI,CACF,EAAS,oBAAoB,CAAK,CACpC,MAAE,CACA,MAAO,EACT,CACA,MAAO,EACT,OAEc,qBACZ,EACA,EAAU,MACF,CACR,GAAI,GAAQ,EAEZ,GAAI,WAAW,EAAM,KAAK,IAAM,EAAG,MAAO,GAE1C,EAAM,WAAW,QAAQ,AAAC,GAAS,CACjC,GACE,EAAK,MAAQ,EAAK,SAClB,AAAU,EAAQ,oBAAoB,CAAI,CAC9C,CAAC,EAGD,GAAS,EAAS,iBAAiB,CAAK,EAAI,EAAS,eAAe,CAAK,EAEzE,GAAM,GAAO,KAAK,IAAI,EAAQ,WAAW,EAAM,KAAK,CAAC,EAErD,GAAI,EAAO,EAAS,CAClB,GAAM,GAAe,qBAAqB,EAAM,sEAAsE,EAAM,sBAAsB,OAAW,IAE7J,GAAI,GAAQ,IACV,KAAM,IAAI,OAAM,CAAY,CAIhC,CAEA,MAAO,EACT,OAEc,uBACZ,EACA,EACM,CACN,GAAM,GAAe,KAAK,kCACxB,EAAO,IACP,EAAO,IACP,KAAK,oBAAoB,CAAK,CAChC,EAGA,GAAI,IAAiB,EAAO,cAC1B,KAAM,IAAI,OACR,6BAA6B,6CAAwD,EAAO,eAC9F,CAEJ,OAEc,uBACZ,EACA,EACoB,CACpB,GAAM,CAAE,YAAa,EAErB,GAAI,CAAC,CAAC,MAAO,MAAO,KAAK,EAAE,SAAS,CAAQ,EAC1C,KAAM,IAAI,OACR,yBAAyB,gCAC3B,EAUF,GAPI,IAAa,OAAS,IAAiB,GAQzC,CAAC,MAAO,KAAK,EAAE,SAAS,CAAQ,GAChC,EAAe,KACf,EAAe,KAEf,MAAO,GAGT,KAAM,IAAI,OACR,2CAA2C,uBAA8B,GAC3E,CACF,OAEc,gBAAe,EAAuC,CAClE,GAAI,CAAC,cAAc,KAAK,EAAM,QAAQ,EACpC,KAAM,IAAI,OACR,yBAAyB,EAAM,uCACjC,EAEF,MAAO,GAAM,QACf,OAEe,mCACb,EACA,EACA,EACQ,CACR,MAAQ,GAAS,CAAS,EAAI,EAAS,CAAS,GAAK,CACvD,OAKc,YACZ,EACwC,CACxC,MAAK,QAAO,UAAU,eAAe,KAAK,EAAM,QAAS,QAAQ,EAG1D,EAAM,QAAQ,OAAS,EACzB,EAAM,QACP,OAJK,EAAM,OAKjB,OAEc,qBAAoB,EAAyB,CACzD,MACE,GAAM,SAAW,aAChB,GAAM,UAAU,KAAK,AAAC,GAAM,EAAE,MAAQ,mBAAmB,GACvD,EAAM,QAAQ,OAAS,GACtB,EAAM,QAAQ,OACZ,CAAC,EAAO,IAAY,EAAQ,WAAW,EAAQ,OAAS,GAAG,EAC3D,CACF,IAAM,EAEd,OAYc,oBACZ,EACA,EACA,EACA,EACQ,CAzWZ,QA0WI,GAAM,GAAgB,EAAS,oBAAoB,CAAK,EAExD,GAAI,IAAkB,SACpB,KAAM,IAAI,OACR,0FAA0F,OAAmB,EAAM,sBACrH,EAGF,GACE,EAAM,UAAU,KAAK,AAAC,GAAM,EAAE,MAAQ,mBAAmB,GACxD,EAAM,QAAQ,OAAS,GACtB,EAAM,QAAQ,OACZ,CAAC,EAAO,IAAY,EAAQ,WAAW,EAAQ,OAAS,GAAG,EAC3D,CACF,IAAM,EAER,KAAM,IAAI,OACR,oEACF,EAGF,GAAM,GAAe,KAAM,UAAU,KACnC,AAAC,GAAM,EAAE,MAAQ,yBACnB,IAFqB,cAElB,MAYG,EAAiB,KAAM,UAAU,KACrC,AAAC,GAAM,EAAE,MAAQ,kBACnB,IAFuB,cAEpB,MAEH,GAAI,CAAC,GAAgB,WAAW,CAAY,GAAK,EAC/C,KAAM,IAAI,OACR,6EAA6E,KAC/E,EAGF,GAAI,CAAC,GAAa,EAAS,CAAS,GAAK,EACvC,KAAM,IAAI,OAAM,+BAA+B,GAAW,EAG5D,GAAI,CAAC,GAAa,EAAS,CAAS,EAAI,EACtC,KAAM,IAAI,OAAM,+BAA+B,GAAW,EAG5D,GAAI,CAAC,EACH,KAAM,IAAI,OACR,sEAAsE,KACxE,EAGF,GAAI,IAAmB,MACrB,KAAM,IAAI,OACR,iCAAiC,kBACnC,EAGF,GAAI,GAAG,EAAM,YAAY,KAAqB,UAAW,MAAO,GAEhE,GAAM,GAAQ,GAAiB,EAAS,oBAAoB,CAAK,EAC3D,EAAqB,KAAK,kCAC9B,EACA,EACA,CACF,EAEA,GAAI,CACF,EAAS,sBAAsB,EAAO,CAAkB,CAC1D,OAAS,EAAP,CACA,KAAM,IAAI,OACR,iEAAiE,MAAuB,GAC1F,CACF,CAEA,MAAO,EACT,OAEc,mBACZ,EACA,EACA,EACU,CACV,GAAI,EAAK,MAAQ,EACf,MAAO,CAAE,IAAK,EAAG,MAAO,QAAS,EAGnC,GAAM,GAAW,EAAS,oBAAoB,EAAM,SAAS,EACzD,EAEJ,GAAI,OAAO,GAAG,EAAS,SAAU,EAAS,OAAO,EAC/C,EAAW,EAAS,aACf,CACL,GAAI,EAAK,YAAc,GACrB,KAAM,IAAI,OACR,yCAAyC,EAAK,wDAChD,EAGF,EAAW,AADQ,EAAK,YAAc,eACd,EAAS,SAAW,EAAS,OACvD,CAEA,GAAI,EAAK,MAAQ,EAAS,IACxB,KAAM,IAAI,OACR,wCAAwC,EAAK,kCAAkC,EAAS,yBAAyB,EAAS,OAC5H,EAEF,MAAO,EACT,OAKc,YAAW,EAA6B,CACpD,GAAM,GAAW,EAAI,MAErB,GAAI,CAIF,GAAM,GAAM,AAFE,2BAEI,KAAK,CAAQ,EAE/B,GAAI,CAAC,GAAO,EAAI,SAAW,EACzB,KAAM,IAAI,OACR,kDAAkD,GACpD,EAEF,MAAO,YAAW,EAAI,EAAE,EAAI,GAC9B,MAAE,CACA,KAAM,IAAI,OAAM,yBAAyB,GAAU,CACrD,CACF,OAEc,qBAAoB,EAGhC,CACA,GAAI,GAAqB,CAAC,EAE1B,SAAM,QAAQ,AAAC,GAAwB,CA5f3C,MA6fM,GAAM,GAAM,EAAS,WAAW,CAAG,EAC7B,EAAW,CAAE,MAAK,MAAO,EAAI,KAAM,EAEzC,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,mBAAmB,EAIrC,AAAI,MAAO,KAAP,cAAW,MAAO,EAAK,EAAO,KAAK,CAAQ,EAC1C,EAAS,CAAC,EAAU,GAAG,CAAM,CACpC,CAAC,EAEM,CAAE,SAAU,EAAO,GAAI,QAAS,EAAO,EAAG,CACnD,OAEc,mBAAkB,EAA+B,CA5gBjE,MA6gBI,MAAO,KAAM,UAAU,KACrB,AAAC,GAA2B,EAAM,MAAQ,oBAC5C,IAFO,cAEJ,KACL,OAEc,kBAAiB,EAAoC,CAlhBrE,MAmhBI,MAAO,KAAM,UAAU,KACrB,AAAC,GAA2B,EAAM,MAAQ,gBAC5C,IAFO,cAEJ,KACL,OAEc,qBAAoB,EAAoC,CAxhBxE,MAyhBI,MAAO,KAAM,UAAU,KACrB,AAAC,GAA2B,EAAM,MAAQ,mBAC5C,IAFO,cAEJ,KACL,OAEc,oBACZ,EACA,EACA,EACQ,CACR,MAAO,GAAG,uFAAmG,eAAqB,GACpI,OAEc,oBACZ,EACA,EACQ,CAziBZ,QA2iBI,GAAM,GAAU,KAAM,UAAU,KAC9B,AAAC,GAA2B,EAAM,MAAQ,sBAC5C,IAFgB,cAEb,MAEH,GAAI,GAAW,IAAY,GACzB,MAAO,GAGT,GAAI,GAAW,KAAM,UAAU,KAC7B,AAAC,GAA2B,EAAM,MAAQ,eAC5C,IAFe,cAEZ,MAMH,GAJK,GACH,GAAW,EAAM,WAGf,CAAC,EACH,KAAM,IAAI,OAAM,8CAA8C,EAGhE,GAAI,CAAC,EAAe,CAClB,GAAM,GAAW,EAAS,iBAAiB,CAAK,EAEhD,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,qDAAqD,EAGvE,GAAI,GAAU,EAAM,GAGpB,MAAI,OAAO,IAAY,UAAY,EAAQ,SAAS,GAAG,GACrD,GAAU,EAAQ,MAAM,GAAG,EAAE,IAGxB,KAAK,mBAAmB,EAAS,EAAU,CAAQ,CAC5D,CAEA,MAAO,GAAG,uFAAmG,EAAM,gBAAgB,GACrI,OAEc,wBAAuB,EAAwB,CAnlB/D,MAolBI,GAAI,CAAC,EAAM,UAAW,MAAO,GAC7B,GAAM,GAAY,KAAM,UAAU,KAChC,AAAC,GAA2B,EAAM,MAAQ,yBAC5C,IAFkB,cAEf,MAEH,GAAI,CAAC,EACH,KAAM,IAAI,OACR,qEACF,EAEF,MAAO,UAAS,EAAW,EAAE,CAC/B,OAEc,kBAAiB,EAAyB,CAjmB1D,MAkmBI,GAAI,EAAM,SAAW,aAAe,MAAM,UAAN,cAAe,UAAW,EAC5D,KAAM,IAAI,OACR,yDACF,EACK,GAAI,EAAM,SAAW,WAC1B,KAAM,IAAI,OACR,6BAA6B,EAAM,yEACrC,EAEF,MAAO,EACT,OAEc,oBAAmB,EAAwB,CACvD,GAAI,GAEJ,GAAI,CACF,EAAe,KAAK,kBAAkB,CAAK,CAC7C,MAAE,CACA,GAAI,CACF,EAAe,KAAK,mBAAmB,CAAK,CAC9C,MAAE,CACA,KAAM,IAAI,OACR,mFACF,CACF,CACF,CAEA,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,iCAAiC,EAGnD,MAAO,GAAuB,CAAY,CAC5C,OAEc,oBAAmB,EAAwB,CACvD,GAAI,EAAM,SAAS,YAAc,EAAM,SAAS,UAC9C,MAAO,GACL,GAAG,EAAM,SAAS,cAAc,EAAM,SAAS,WACjD,EAAE,KAAK,EAET,KAAM,IAAI,OAAM,6CAA6C,CAC/D,OAEc,mBAAkB,EAAwB,CACtD,GAAI,EAAM,QAAQ,YAAc,EAAM,QAAQ,UAC5C,MAAO,GACL,GAAG,EAAM,QAAQ,cAAc,EAAM,QAAQ,WAC/C,EAAE,KAAK,EAET,KAAM,IAAI,OAAM,4CAA4C,CAC9D,OAEc,qBAAoB,EAAwB,CAExD,GAAI,EAAM,QAAQ,MAChB,MAAO,GAAM,QAAQ,MAEvB,KAAM,IAAI,OAAM,6CAA6C,CAC/D,OAEc,yBACZ,EAC2D,CAC3D,GAAM,GAAmB,CACvB,EACA,IAEI,GAAY,EAAS,OAAS,IAC5B,IACF,GAAW,EAAS,QAAQ,EAAU,EAAE,GAGtC,EAAS,OAAS,IACb,EAAS,MAAM,EAAG,EAAE,EAGxB,EAGH,EAAc,EAAY,iBAAiB,EAAM,QAAQ,OAAO,EAEhE,EAAsB,EAAY,iBACtC,EAAM,SAAS,OACjB,EAEA,GAAI,CAAC,EACH,KAAM,IAAI,OACR,wEACF,EAGF,GAAI,CAAC,EACH,KAAM,IAAI,OACR,yEACF,EAGF,MAAO,CACL,cACA,sBAEA,SAAU,EAAuB,EAAM,QAAQ,SAAS,EACxD,SAAU,EAAuB,EAAM,QAAQ,SAAS,EACxD,QAAS,EAAiB,EAAM,QAAQ,SAAU,EAAM,SAAS,IAAI,EACrE,KAAM,EAAuB,EAAM,QAAQ,IAAI,EAE/C,aAAc,EAAuB,EAAS,mBAAmB,CAAK,CAAC,EACvE,iBAAkB,EAAuB,EAAM,SAAS,SAAS,EACjE,iBAAkB,EAAuB,EAAM,SAAS,SAAS,EACjE,gBAAiB,EACf,EAAM,SAAS,SACf,EAAM,SAAS,IACjB,EACA,aAAc,EAAuB,EAAM,SAAS,IAAI,CAC1D,CACF,CACF,EA7rBA,IAgBgB,AAhBhB,EAgBgB,sBAAwB,CACpC,EACA,IACoB,CA5CxB,MA6CK,gBAAM,QAAQ,CAAM,EAAI,EAAS,EAAO,WAAW,KAClD,CAAC,CAAE,SAAU,IAAQ,CACvB,IAFC,cAEE,OAES,AAxBhB,EAwBgB,oBAAsB,AAAC,GACnC,EAAM,UAAU,UACd,CAAC,CAAE,SAAU,IAAQ,4BACvB,IAAM,GAEM,AA7BhB,EA6BgB,oBAAsB,AAAC,GACnC,EAAS,sBACP,EAAM,UACN,4BACF,EAqaY,AAtchB,EAscgB,eAAiB,AAAC,GAC9B,GAAI,MAAK,EAAM,SAAS,EAAE,mBAAmB,OAAO,EAwPxD,GAAO,GAAQ,ECrsBf,WAAwB,OASR,SACZ,EACA,EAAY,GACZ,EACM,CACN,GAAM,GAAU,KAAK,mBAAmB,EAAY,CAAa,EAEjE,MAAI,GACK,EAAQ,SAAW,EAAQ,SAE7B,EAAQ,QACjB,OAEc,4BAA2B,EAAyB,CAChE,GAAM,GAAa,EAAM,QAAQ,QAC3B,EAAgB,EAAS,oBAAoB,CAAK,EAExD,MAAO,MAAK,mBAAmB,EAAY,CAAa,CAC1D,OAEc,wBACZ,EACA,EACM,CACN,GAAM,GAAU,EAAS,2BAA2B,CAAK,EAEzD,MAAI,GAAU,kBAAkB,CAAI,EAC3B,EAAQ,SAAW,EAAQ,SAE7B,EAAQ,QACjB,OAEc,oBACZ,EACA,EACS,CACT,GAAI,KAAK,MAAM,IAAI,CAAU,EAAG,CAC9B,GAAM,GAAU,KAAK,MAAM,IAAI,CAAU,EAEzC,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,sCAAsC,GAAY,EACpE,MAAO,EACT,CAEA,GAAI,CAAC,EAAY,WAAW,CAAU,EACpC,MAAO,MAAK,MAAM,IAAI,QAAQ,EAGhC,GAAI,CAAC,EACH,KAAM,IAAI,OACR,qDAAqD,GACvD,EAGF,GAAM,GAAU,KAAK,MAAM,IAAI,CAAa,EAE5C,GAAI,CAAC,EACH,KAAM,IAAI,OACR,6CAA6C,GAC/C,EACF,MAAO,EACT,OAEc,eACZ,EACA,EACS,CACT,GAAI,KAAK,IAAI,IAAI,CAAU,EAAG,CAC5B,GAAM,GAAU,KAAK,IAAI,IAAI,CAAU,EAEvC,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,oCAAoC,GAAY,EAClE,MAAO,EACT,CAEA,GAAI,CAAC,EACH,KAAM,IAAI,OACR,qDAAqD,GACvD,EAGF,GAAM,GAAU,KAAK,IAAI,IAAI,CAAa,EAE1C,GAAI,CAAC,EACH,KAAM,IAAI,OACR,2CAA2C,GAC7C,EACF,MAAO,EACT,CACF,EAlGA,IAC0B,AAD1B,EAC0B,IAAM,EAC5B,CACF,EAEwB,AAL1B,EAK0B,MAAQ,EAC9B,CACF,EA6FF,GAAO,GAAQ,ECrHf,WAAwB,OACR,wBAAuB,EAA6B,CAChE,GAAM,GAAsC,CAC1C,SAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,GACP,EACA,MAAO,GAAY,QAAQ,eAAgB,AAAC,GAAM,EAAY,EAAE,CAClE,OAEc,gBAAe,EAA2B,CACtD,GAAM,GAAW,CAAC,EAElB,OAAW,KAAQ,GAAM,WACvB,EAAS,KAAK,EAAS,cAAc,CAAI,CAAC,EAE5C,MAAO,EACT,OAEe,eAAc,EAAgC,CAC3D,MAAO,CACL,cAAe,EAAK,IACpB,YAAa,EAAS,uBAAuB,EAAK,IAAI,EACtD,KAAM,OACR,CACF,CACF,EAEO,EAAQ,EC9Bf,WAAyB,OACT,oBAAmB,EAA4C,CAC3E,GAAM,GAAa,EAAY,iBAAiB,CAAgB,EAEhE,MAAI,GAAY,WAAW,CAAU,EAC/B,MAAM,KAAK,CAAU,EAChB,QAEF,QAEF,QACT,OAEc,mBACZ,EACA,EAAyB,GACf,CACV,GAAI,GAGA,EAEJ,GAAI,CACF,EAAY,EAAS,wBAAwB,CAAK,EAElD,EAAU,EAAU,mBAAmB,EAAU,mBAAmB,CACtE,OAAS,EAAP,CACA,GAAI,EACF,KAAM,IAAI,OAAO,EAAgB,OAAO,CAE5C,CAEA,MAAO,IACL,KAAM,EAAS,mBAAmB,CAAK,EACvC,KAAM,UACN,MAAO,EAAS,oBAAoB,CAAK,EACzC,WACG,EAEP,CACF,EAEO,GAAQ,EC1Bf,WAAuC,OACvB,kBAAiB,EAA2B,CACxD,GAAI,EAAQ,YAAc,GACxB,KAAM,IAAI,OAAM,qCAAqC,EAChD,GAAI,EAAQ,SAAW,GAC5B,KAAM,IAAI,OAAM,yCAAyC,EACpD,GAAI,EAAQ,uBACjB,KAAM,IAAI,OAAM,wCAAwC,EAE1D,MAAO,EACT,OAEc,6BAA4B,EAA0B,CAClE,GAAI,GAAkB,EAKtB,GAJA,EAAQ,YAAY,QAAQ,AAAC,GAAQ,CACnC,GAAmB,EAAI,MAAS,GAAI,mBAAqB,EAC3D,CAAC,EAEG,EAAQ,OAAS,EAAQ,QAAU,EACrC,KAAM,IAAI,OACR,qBAAqB,uDAAqE,EAAQ,OACpG,EAGF,GAAI,IAAoB,EACtB,KAAM,IAAI,OAAM,yCAAyC,EAE3D,MAAO,EACT,OAEc,yBACZ,EACA,EACA,EACA,EACgB,CAChB,GAAM,GAAiB,EAAS,4BAA4B,CAAO,EAC7D,EAAe,GAAgB,EAAQ,aAE7C,GAAI,CAAC,oCAAoC,KAAK,CAAa,EACzD,KAAM,IAAI,WAAU,oCAAoC,GAAe,EAGzE,GAAI,CAAC,EACH,KAAM,IAAI,WAAU,4CAA4C,EAalE,MAVuC,CACrC,cAAe,EAAQ,eACvB,OAAQ,EAAiB,EACzB,eAAgB,EAChB,YAAa,EAAW,CAAW,EACnC,eACA,SAAU,EAAQ,SAClB,cAAe,CACjB,CAGF,OAEc,yBAAwB,EAGpC,CACA,GAAI,GACA,EAQJ,GAPA,EAAQ,YAAY,QAAQ,AAAC,GAAoB,CAC/C,AAAI,EAAC,GAAQ,EAAI,KAAO,EAAI,IAAM,IAChC,GAAM,EAAI,IACV,EAAU,EAAI,cAElB,CAAC,EAEG,CAAC,GAAO,CAAC,EACX,KAAM,IAAI,OACR,yDACE,EAAQ,gBAAkB,IAE9B,EAEF,MAAO,CAAE,IAAK,EAAK,cAAe,CAAQ,CAC5C,OAEc,uBACZ,EACA,EAC0B,CAC1B,GAAM,GAA4B,CAAC,EAEnC,OAAW,KAAU,GAAS,CAC5B,GAAM,CAAE,SAAQ,MAAO,EACjB,EAAyB,CAAE,MAAO,CAAC,EAAG,SAAQ,GAAI,EAAG,SAAS,CAAE,EAElE,EAAiB,EACjB,EAAe,EAInB,GAFA,EAAiB,WAAY,EAAkB,MAAM,EAEjD,GAAkB,EACpB,KAAM,IAAI,OACR,6BAA6B,oDAAiE,IAChG,EAGF,GAAM,GAAmB,AAAC,GAAqC,CAC7D,GAAI,EAAK,gBAAkB,OACzB,KAAM,IAAI,OACR,yDAAyD,EAAK,+BAA+B,IAC/F,EAGF,GAAI,EAAK,MAAQ,OACf,KAAM,IAAI,OACR,yDAAyD,EAAK,+BAA+B,IAC/F,EAGF,GAAI,EAAK,oBAAsB,OAC7B,KAAM,IAAI,OACR,6DAA6D,EAAK,+BAA+B,IACnG,EAGF,MAAO,CACL,cAAe,EAAK,cACpB,cAAe,EAAK,cACpB,IAAK,EAAK,IACV,kBAAmB,EAAK,kBACxB,MAAO,EAAK,KACd,CACF,EAEM,EAAuB,EAAS,wBAAwB,CAAO,EAGrE,GAAI,EAAO,SAAW,kBACpB,OAAW,KAAQ,GAAQ,YACzB,AAAI,EAAK,cAAc,WAAW,UAAU,GAC1C,GAAW,MAAM,KAAK,EAAiB,CAAI,CAAC,EAE5C,GAAgB,EAAK,WAGpB,IAAI,YAAY,KAAK,CAAM,EAEhC,KAAM,IAAI,OAAM,wCAAwC,IAAS,EAkCjE,OAAW,KAAQ,GAAQ,YACzB,GAAI,EAAK,MAAQ,EACf,OAAW,KAAkB,GAAO,WAAY,CAC9C,GAAM,GAAc,CAAC,EAAU,gBAAgB,CAAc,EAE7D,GAAI,EAAe,MAAQ,EAAK,cAAe,CAC7C,GAAI,CAAC,IAAgB,EAAK,MACxB,KAAM,IAAI,OACR,+BACE,EAAK,2BAEL,EAAK,cACE,CAAC,mBAA6B,IACzC,EAGF,EAAW,MAAM,KAAK,EAAiB,CAAI,CAAC,EAC5C,GAAgB,CAAC,CACnB,CACF,EAKN,GAAI,KAAK,IAAI,EAAiB,CAAY,EAAI,KAC5C,KAAM,IAAI,OACR,oCAAoC,WAAwB,mBAA8B,IAC5F,EAGF,AAAI,EAAW,MAAM,OAAS,GAC5B,EAAY,KAAK,CAAU,CAE/B,CACA,MAAO,GAAY,OAAS,EAAI,EAAc,MAChD,OAEc,wBAEZ,EACA,EACkB,CAjPtB,QAkPI,GACE,EAAc,SAAW,IACzB,CAAC,EAAc,aACf,CAAE,OAAc,cAAd,cAA2B,SAAU,GAEvC,KAAM,IAAI,OAAM,+CAA+C,EAGjE,GAAM,GAAa,EAAc,YACjC,EAAc,YAAc,CAAC,EAE7B,OAAW,KAAU,GAAS,CAC5B,GAAM,GAAe,CAAC,OAAO,UAAU,eAAe,KACpD,EACA,QACF,EAEI,EAAiB,EACjB,EAAS,EAQb,GANA,AAAI,EACF,EAAiB,WAAY,EAAyB,KAAK,EAE3D,EAAiB,WAAY,EAAkB,MAAM,EAGnD,EAAQ,SAAW,GAAK,EAC1B,GAAI,EAAO,SAAW,kBACpB,OAAW,KAAc,GACvB,AAAI,EAAW,cAAc,WAAW,UAAU,GAChD,GAAc,YAAY,KAAK,CAAU,EACzC,GAAU,EAAW,WAGpB,MAAI,YAAY,KAAK,EAAO,MAAM,EAEjC,GAAI,OAAM,wBAAwB,EAWlC,GAAI,OAAM,sBAAsB,EAAO,QAAQ,MAIvD,QAAW,KAAO,GAChB,GAAI,EAAI,MAAQ,EACd,OAAW,KAAe,GAAkB,WAAY,CACtD,GAAM,GAAc,EAAU,gBAAgB,CAAU,EAExD,GACE,EAAW,MAAQ,EAAI,eACvB,IAAgB,CAAC,EAAI,MACrB,CACA,GAAM,GAAY,EAAU,kBAAkB,CAAU,EAClD,EAAa,EAAU,WAAW,CAAU,EAC5C,EAAS,WAAW,EAAW,SAAS,EAAI,EAE9C,EAAM,EAAI,IACV,EAAgB,EAAI,cAElB,EACJ,EAAc,iBAAmB,EAAc,QAEjD,GAAI,CAAC,GAAc,IAAe,GAChC,KAAM,IAAI,OACR,oDAAoD,GACtD,EAGF,GAAM,IAAgB,EAAY,iBAAiB,CAAU,EAM7D,GAJC,CAAE,MAAK,eAAc,EAAI,EACtB,CAAE,IAAK,EAAG,cAAe,IAAK,EAC9B,EAAS,QAAQ,GAAe,CAAS,EAG3C,EAAM,MAAQ,EAAI,KAClB,IAAkB,EAAI,eACrB,GAAU,EAAM,EAEjB,KAAM,IAAI,OACR,6DAA6D,OAAS,eACpE,EAAI,SACA,EAAI,gBACR,EAAS,GAAK,oCAElB,EAGF,KAAc,cAAd,QAA2B,KAAK,GAChC,GAAU,CACZ,CACF,CAMN,GAAI,CAAC,IAAW,EACd,KAAM,IAAI,OACR,2BAA2B,gBAAqB,GAClD,CAEJ,CAEA,MAAO,EACT,OAEc,gCACZ,EACA,EACS,CACT,GAAM,GAAkC,CAAC,EAEzC,OAAW,KAAU,GAAS,CAC5B,GAAM,GAAiB,WAAW,EAAO,MAAM,EAC3C,EAAe,EAEnB,OAAW,KAAQ,GAAO,WAExB,EAAQ,YAAY,QAAQ,AAAC,GAAQ,CACnC,GAAI,EAAK,MAAQ,EAAI,cAAe,CAClC,GAAM,GAAa,CACjB,YAAW,EAAK,KAAK,EAAI,WAAW,EAAK,SAAS,GAGpD,GAAI,EAAa,EAAG,CAClB,GAAM,GAAmB,KAAK,MAAM,EAAa,EAAI,KAAK,EACpD,EAAY,EAAa,EAE/B,GAAI,EAAmB,IAAc,EACnC,KAAM,IAAI,OACR,4BAA4B,qBAA6B,OAAsB,SAAiB,GAClG,EAGF,GAAgB,EAEhB,EAAkB,KAAK,OAClB,GADkB,CAErB,MAAO,EACP,kBAAmB,CAAC,CACtB,EAAC,CACH,CACF,CACF,CAAC,EAGH,GAAI,KAAK,IAAI,EAAe,CAAc,EAAI,KAC5C,KAAM,IAAI,OACR,sCAAsC,uBAAoC,GAC5E,CACJ,CACA,MAAO,QAAK,GAAL,CAAc,YAAa,CAAkB,EACtD,OAEc,qBACZ,EACA,EACkB,CAClB,GAAM,GAA4B,CAAC,EAEnC,SAAM,WAAW,QAAQ,AAAC,GAAe,CACvC,GAAM,GAAQ,EAAU,gBAAgB,CAAI,EAE5C,GAAI,EAAQ,EAAG,CACb,GAAM,GAAU,EAAS,uBAAuB,EAAO,CAAI,EAC3D,EAAY,KAAK,CACf,cAAe,EAAK,IACpB,kBAAmB,CAAC,EAAK,SACzB,cAAe,EAAQ,cACvB,MAAO,CACT,CAAC,CACH,CACF,CAAC,EACM,OACF,GADE,CAEL,YAAa,CACf,EACF,OAEe,+BACb,EACA,EACA,EAAwB,GACuB,CAC/C,GAAM,GAAgB,EAAS,oBAAoB,CAAK,EAElD,EAAU,EAAY,kBAAkB,EAAM,QAAQ,OAAO,EAE/D,EAEJ,AAAK,GACH,GAAkB,EAAY,kBAAkB,EAAM,SAAS,OAAO,GAGxE,GAAM,GAAc,GAAI,MAAK,EAAM,SAAS,EAAE,mBAAmB,OAAO,EAClE,EAAc,IAAkB,SAAW,UAAY,cACvD,EAAa,IAAkB,SAAW,OAAY,OAEtD,EAAkB,GAAG,KAAoB,EAAM,KAErD,MAAO,CACL,cACA,QAAS,EACT,cACA,aAEA,eAAgB,IAIhB,SAAU,EAAS,eAAe,CAAK,EAEvC,UACA,kBAEA,YAAa,GAEb,iBAYF,CACF,OAEe,wBACb,EACA,EACA,EACc,CACd,GAAM,GAA4B,CAAC,EAE/B,EAAoB,CAAE,IAAK,GAAI,cAAe,EAAG,EAErD,EAAM,WAAW,KAAK,CAAC,EAAO,IAAkB,EAAM,MAAQ,EAAM,KAAK,EAEzE,OAAW,KAAQ,GAAM,WAAY,CACnC,GAAM,GAAY,EAAU,kBAAkB,CAAI,EAE5C,CAAE,MAAK,iBAAkB,EAAU,WAAW,CAAI,EACpD,CAAE,IAAK,EAAG,cAAe,IAAK,EAC9B,EAAS,QAAQ,EAAM,QAAQ,QAAS,EAAW,CAAa,EAEpE,AAAI,EAAK,MAAQ,GAAK,EAAM,EAAY,KACtC,GAAc,CAAE,MAAK,eAAc,GAKrC,EAAY,KAAK,CACf,cAAe,EACf,IAAK,WAAY,GAAM,KAAK,SAAS,EAAE,MAAM,EAAG,EAAE,CAAC,EACnD,cAAe,EAAK,IACpB,YAAa,EAAS,uBAAuB,EAAK,IAAI,EACtD,kBAAmB,EAAK,SACxB,MAAO,EAAU,gBAAgB,CAAI,CACvC,CAAC,CACH,CAEA,GAAI,EAAY,MAAQ,GACtB,KAAM,IAAI,OAAM,4CAA4C,EAG9D,SAAS,mBAAmB,EAAa,EAAO,CAAW,EAC3D,EAAS,sBAAsB,EAAa,CAAK,EACjD,EAAS,eAAe,EAAa,EAAO,CAAa,EAQlD,CACT,OAEe,sBACb,EACA,EACA,EACA,EACM,CA3hBV,MA4hBI,GAAI,GACJ,EAAS,sBAAsB,EAAO,CAAY,EAElD,GAAI,GAEA,EAEJ,GAAI,IAAkB,SAAU,CAC9B,GAAM,GAAiB,KAAM,UAAU,KACrC,AAAC,GAAS,EAAK,MAAQ,kBACzB,IAFuB,cAEpB,MAEH,GAAI,IAAmB,MACrB,KAAM,IAAI,OACR,0CAA0C,GAC5C,EAEF,EAAa,EAAS,iBAAiB,EAAO,CAAa,EAC3D,EAAQ,EAAa,CACvB,KAAO,CAKL,GAJA,EAAW,EAAS,eAAe,CAAK,EACxC,EACE,EAAS,iBAAiB,EAAO,CAAa,EAAI,EAEhD,IAAa,OACf,GAAI,IAAiB,EACnB,KAAM,IAAI,OACR,qDAAqD,GACvD,UAEO,IAAiB,EAC1B,KAAM,IAAI,OACR,qBAAqB,yDACvB,EAEF,EAAQ,EAAa,CACvB,CAEA,EAAY,KAAK,CACf,cAAe,KACf,cAAe,cAAc,IAC7B,YAAa,gBAAgB,EAAM,UAAU,IAC7C,kBAAmB,EACnB,MAAO,CAAC,CACV,CAAC,CACH,OAEc,mBAAkB,EAA2B,CACzD,MAAO,GAAQ,YAAY,KAAK,AAAC,GAC/B,EAAK,cAAc,SAAS,iBAAiB,CAC/C,CACF,OAEe,gBACb,EACA,EACA,EACM,CACN,GAAM,CAAE,SAAU,EACZ,EAAqB,IACrB,EAAmB,IACnB,EACH,IACC,EAAS,oBAAoB,EAAO,CAAkB,GACxD,WAAW,CAAK,EAElB,GAAI,IAAS,EAGb,IAAI,KAAK,IAAI,CAAI,EAAI,EACnB,KAAM,IAAI,OACR,uBAAuB,sBACrB,GACA,EAAS,oBAAoB,EAAO,CAAkB,mBACtC,GACpB,EAGF,AAAI,KAAK,IAAI,CAAI,EAAI,GACnB,EAAY,KAAK,CACf,cAAe,KACf,cAAe,WACf,YAAa,WACb,kBAAmB,EACnB,MAAO,CACT,CAAC,EAEL,OAEc,iCACZ,EACA,EAAa,GACF,CACX,GAAM,GAAsB,CAAC,EAS7B,GAPA,EAAQ,YAAY,QAAQ,AAAC,GAAe,CAC1C,GAAM,CAAE,gBAAe,eAAgB,EAEvC,AAAI,EAAc,SAAS,iBAAiB,GAC1C,EAAS,KAAK,CAAE,gBAAe,YAAa,GAAe,EAAG,CAAC,CACnE,CAAC,EAEG,EAAS,SAAW,EAAG,CACzB,GAAI,EACF,MAAO,CAAC,EAEV,KAAM,IAAI,OAAM,8CAA8C,CAChE,CAEA,MAAO,EACT,OAEe,uBACb,EACA,EACM,CACN,GAAM,CAAE,cAAe,EAEvB,GAAI,CAAC,EAAS,mBAAmB,CAAK,EAAG,OAEzC,GAAM,GAAc,EAAS,sBAC3B,EACA,oBACF,EAEA,WAAY,QAAQ,AAAC,GAA0B,CAC7C,GAAM,CAAE,QAAS,EACjB,EAAY,KAAK,CACf,cAAe,KACf,cAAe,GACb,EAAc,GAAG,KAAiB,qBACjB,IAEnB,YAAa,GACX,EAAc,GAAG,OAAmB,uBACjB,IACrB,MAAO,CAAC,EAAK,OACb,kBAAmB,CACrB,CAAC,CACH,EACF,OAEe,oBACb,EACA,EACA,EACM,CACN,GAAM,GAAe,EAAS,iBAAiB,CAAK,EAEpD,GAAI,IAAiB,EACnB,OAGF,GAAM,GAAc,EAAS,eAAe,CAAK,EAC3C,EAAgB,KAAK,IAAI,EAAc,CAAY,EAEzD,GAAI,EAAgB,EAAK,IAAM,KAAM,CACnC,GAAM,GAAY,EAAgB,EAAK,IAGvC,GAFA,EAAO,EAAS,QAAQ,EAAM,QAAQ,QAAS,CAAS,EAEpD,EAAgB,EAAK,IAAM,KAC7B,KAAM,IAAI,OACR,4BAA4B,EAAgB,sBAC1C,EAAK,IAAM,UAEf,CAEJ,CAEA,EAAY,KAAK,CACf,cAAe,EAAK,cACpB,cAAe,gBACf,YAAa,eACb,kBAAmB,EACnB,MAAO,EAAe,EACtB,IAAK,EAAK,IAAM,GAClB,CAAC,CAyCH,OAEc,kBACZ,EACA,EACA,EACA,EAAyD,YACzD,EACS,CACT,GAAI,EAAM,SAAW,EACnB,KAAM,IAAI,OAAM,6BAA6B,EAAM,SAAS,EAG9D,GAAI,CAAC,EAAM,QAAQ,MACjB,KAAM,IAAI,OAAM,8CAA8C,EAGhE,GAAM,CAAE,yBAA0B,EAAS,yBAAyB,CAAK,EAEnE,EAAgB,EAAS,oBAAoB,CAAK,EAoBxD,MAlByB,QACpB,KAAK,8BACN,EACA,EACA,CACF,GALuB,CAOvB,YAAa,EAAS,eAAe,CAAK,EAE1C,aAAc,EAAS,sBAAsB,EAAO,CAAY,EAEhE,YAAa,EAAS,uBACpB,EACA,EACA,CACF,CACF,EAGF,CACF,EC3xBA,WAA4C,OAC5B,eACZ,EACA,EACQ,CACR,GAAM,CAAE,eAAgB,EAExB,GAAI,UAAU,KAAK,CAAW,EAAG,MAAO,GAExC,GAAM,GAAS,aAAa,KAAK,CAAW,EAE5C,GAAI,CAAC,EACH,KAAM,IAAI,OACR,mDAAmD,GACrD,EAEF,GAAM,GAAY,EAAO,GAEzB,GAAI,EAAU,MAAO,GAAG,KAAY,IAEpC,GAAI,EAAY,SAAS,WAAW,EAClC,MAAO,MAAM,IAGf,GAAI,EAAY,SAAS,UAAU,EACjC,MAAO,MAAM,IAGf,KAAM,IAAI,OAAM,uCAAuC,GAAa,CACtE,OAEc,uBACZ,EACA,EACM,CArCV,UAsCI,GAAI,CACF,GAAM,CAAE,iBAAkB,EAE1B,GACE,KAAK,IACH,WAAW,EAAM,KAAK,EAAK,IAAiB,GAC1C,WAAW,EAAa,KAAK,CACjC,EAAI,GAEJ,KAAM,IAAI,OACR,gBACE,WAAW,EAAM,KAAK,EAAK,IAAiB,4CACJ,EAAa,QACzD,EAGF,GAAM,GAAc,WAClB,KAAM,UAAU,KAAK,CAAC,CAAE,SAAU,IAAQ,aAAa,IAAvD,cAA0D,KAC5D,EACM,EAAc,WAClB,KAAM,UAAU,KAAK,CAAC,CAAE,SAAU,IAAQ,aAAa,IAAvD,cAA0D,KAC5D,EACM,EAAmB,KAAM,UAAU,KACvC,CAAC,CAAE,SAAU,IAAQ,kBACvB,IAFyB,cAEtB,MAEH,GAAI,IAAgB,WAAW,EAAa,GAAG,EAC7C,KAAM,IAAI,OACR,qBAAqB,yCAAmD,EAAa,MACvF,EAGF,GAAI,IAAgB,WAAW,EAAa,GAAG,EAC7C,KAAM,IAAI,OACR,qBAAqB,yCAAmD,EAAa,MACvF,EAGF,GAAI,IAAqB,EAAa,SAAS,YAAY,EACzD,KAAM,IAAI,OACR,0BAA0B,8CAA6D,EAAa,SAAS,YAAY,IAC3H,CAEJ,OAAS,EAAP,CACA,KAAM,IAAI,OACR,mCAAoC,EAAgB,SACtD,CACF,CACF,CACF,ECpFA,WAAsC,OACrB,+BACb,EACA,EACA,EACiB,CACjB,GAAM,GAAgB,EAAS,oBAAoB,CAAK,EAClD,EAAa,GAAI,MACrB,EAAM,SACR,EAAE,mBAAmB,OAAO,EAE5B,GAAI,IAAiB,IACnB,KAAM,IAAI,OAAM,aAAa,EAG/B,MAAO,CACL,cAAe,EAAM,GACrB,SAAU,EAEV,YAAa,EACb,QAAS,EAET,eAAgB,IAAkB,SAAW,KAAO,KAEpD,UAAW,QACX,oBAAqB,CAAC,CACxB,CACF,OAEc,4BACZ,EACA,EAAe,EACE,CAnCrB,MAoCI,GAAM,GAAgB,EAAS,oBAAoB,CAAK,EAExD,GAAI,IAAkB,WACpB,KAAM,IAAI,OAAM,mDAAmD,EAGrE,GAAM,GAAU,EAAS,2BACvB,EACA,EACA,CACF,EACI,EAEJ,GAAI,IAAkB,SAAU,CAC9B,GAAM,GAAiB,KAAM,UAAU,KACrC,AAAC,GAAS,EAAK,MAAQ,kBACzB,IAFuB,cAEpB,MAEH,GAAI,IAAmB,MACrB,KAAM,IAAI,OACR,0CAA0C,GAC5C,EAEF,EAAW,MACX,EAAe,CACjB,SACE,EAAW,EAAS,eAAe,CAAK,EAEpC,IAAa,OACf,GAAI,IAAiB,EACnB,KAAM,IAAI,OACR,mDAAmD,GACrD,UAEO,IAAiB,EAC1B,KAAM,IAAI,OACR,qBAAqB,WAAkB,sDACzC,EAIJ,GAAM,GAAU,EAAiB,8BAC/B,EACA,EACA,CACF,EAEA,SAAQ,MAAQ,EAAQ,MAEjB,CACT,CACF,ECxEO,YACL,EACA,EACa,CACb,GAAM,GAAM,GAAI,KAChB,SAAK,QAAQ,AAAC,GAAS,CACrB,GAAM,GAAM,EAAU,CAAI,EACpB,EAAa,EAAI,IAAI,CAAG,EAE9B,AAAK,EAGH,EAAW,KAAK,CAAI,EAFpB,EAAI,IAAI,EAAK,CAAC,CAAI,CAAC,CAIvB,CAAC,EACM,CACT,CASA,WAAkC,OAClB,uBACZ,EACA,EACA,EAAiB,GAEI,CACrB,GAAM,GAA8B,CAAC,EAsBrC,GApBA,GAAQ,EAAQ,YAAa,AAAC,GAAQ,EAAI,aAAa,EAAE,QACvD,CAAC,EAAM,IAAY,CACjB,GAAI,GAAS,EACT,EAEJ,EAAK,QAAQ,AAAC,GAAQ,CACpB,GAAU,EAAI,MAAS,GAAI,mBAAqB,GAE3C,GAAa,GAAc,EAAI,YACtC,CAAC,EAED,EAAO,KAAK,CACV,QAAS,EACT,MAAO,EACP,OAAQ,WAAW,EAAO,QAAQ,CAAC,CAAC,EACpC,uBAAwB,CAC1B,CAAC,CACH,CACF,EAEI,GAAkB,CAAC,EACrB,KAAM,IAAI,OACR,2DACF,EAqBF,MAAO,GAAO,KAAK,CAAC,EAAG,IACjB,CAAC,EAAE,SAAW,CAAC,EAAE,QAAgB,EAEjC,EAAE,QAAU,IAAa,EAAE,QAAU,EAAE,QACpC,EAAE,QAAU,EAAE,OACtB,CACH,CA4CF,EC5IA,WAAuC,OACvB,+BACZ,EACA,EACA,EACA,EACS,CATb,MAUI,EAAS,sBAAsB,EAAO,CAAY,EAIlD,GAAI,GAEE,EAAgB,GAAkB,EAAS,oBAAoB,CAAK,EACpE,EAAa,EAAS,iBAAiB,EAAO,CAAa,EAEjE,GAAI,IAAkB,SAAU,CAC9B,GAAM,GAAiB,KAAM,UAAU,KACrC,AAAC,GAAS,EAAK,MAAQ,kBACzB,IAFuB,cAEpB,MAEH,GAAI,IAAmB,MACrB,KAAM,IAAI,OACR,0CAA0C,GAC5C,EAEF,EAAQ,CACV,KACE,GAAQ,EAAa,EAGvB,MAAO,CACL,YAAa,gBAAgB,KAAoB,EAAM,UAAU,IACjE,gBAAiB,EAAS,eAAe,CAAK,EAC9C,cAAe,IACf,YAAa,CACX,CACE,QAAS,IAAkB,SAAW,KAAO,KAC7C,MAAO,EACP,OAAQ,CACV,EACA,CACE,QAAS,KACT,MAAO,EACP,OAAQ,CACV,CACF,CACF,CACF,CACF",
  "names": []
}
